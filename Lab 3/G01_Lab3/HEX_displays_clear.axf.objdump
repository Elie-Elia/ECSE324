
P:/ECSE324/G01_Lab3/HEX_displays_clear.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	94 10 00 00 a0 10 00 00 ac 10 00 00 b8 10 00 00     ................
  30:	c4 10 00 00 d4 14 00 00 3c 0f 00 00 d0 10 00 00     ........<.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0004e5 	bl	1470 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000015c4 	.word	0x000015c4

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001a00 	.word	0x00001a00

00000124 <__cs3_heap_start_ptr>:
     124:	00001a28 	.word	0x00001a28

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001a08 	.word	0x00001a08
     170:	00001a0b 	.word	0x00001a0b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001a08 	.word	0x00001a08
     1bc:	00001a08 	.word	0x00001a08
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001a08 	.word	0x00001a08
     200:	00000000 	.word	0x00000000
     204:	00001560 	.word	0x00001560

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001560 	.word	0x00001560
     250:	00001a0c 	.word	0x00001a0c
     254:	000015c8 	.word	0x000015c8
     258:	00000000 	.word	0x00000000

0000025c <HEX_clear_ASM>:
			.global  HEX_clear_ASM
			
			/*This subroutine clears all the display segments of whichever HEX display is passed in the parameter*/
			/*It does so by simply clearing all display segements by passing 0 to it which turns all segemtns off*/
HEX_clear_ASM: 
			LDR R2, =HEX_5_and_4
     25c:	e59f2064 	ldr	r2, [pc, #100]	; 2c8 <END+0x4>
			LDR R1, =HEX_0_to_3
     260:	e59f1064 	ldr	r1, [pc, #100]	; 2cc <END+0x8>

00000264 <CHECK_HEX0>:
CHECK_HEX0: // CHECKS IF HEX0 IS THE REGISTER TO CLEAR BY COMPARING IT TO THE GIVEN INPUT IN R0 IF CONTINUE TO THE CLEAR BRANCH
			TST	R0, #0x00000001
     264:	e3100001 	tst	r0, #1
			BEQ CHECK_HEX1
     268:	0a000001 	beq	274 <CHECK_HEX1>

0000026c <CLEAR_HEX_0>:
			
CLEAR_HEX_0: //CLEAR THE SPECIFIC HEX DISPLAY
			MOV R3, #0
     26c:	e3a03000 	mov	r3, #0
			STR R3, [R1]
     270:	e5813000 	str	r3, [r1]

00000274 <CHECK_HEX1>:

CHECK_HEX1:// CHECKS IF HEX1 IS THE REGISTER TO CLEAR BY COMPARING IT TO THE GIVEN INPUT IN R0 IF CONTINUE TO THE CLEAR BRANCH
			TST R0, #0x00000002
     274:	e3100002 	tst	r0, #2
			BEQ CHECK_HEX2
     278:	0a000001 	beq	284 <CHECK_HEX2>

0000027c <CLEAR_HEX_1>:
			
CLEAR_HEX_1: //CLEAR THE SPECIFIC HEX DISPLAY
			MOV R3, #0
     27c:	e3a03000 	mov	r3, #0
			STR R3, [R1]
     280:	e5813000 	str	r3, [r1]

00000284 <CHECK_HEX2>:

CHECK_HEX2:	// CHECKS IF HEX2 IS THE REGISTER TO CLEAR BY COMPARING IT TO THE GIVEN INPUT IN R0 IF CONTINUE TO THE CLEAR BRANCH	
			TST R0, #0x00000004
     284:	e3100004 	tst	r0, #4
			BEQ CHECK_HEX3
     288:	0a000001 	beq	294 <CHECK_HEX3>

0000028c <CLEAR_HEX_2>:

CLEAR_HEX_2://CLEAR THE SPECIFIC HEX DISPLAY
			MOV R3, #0
     28c:	e3a03000 	mov	r3, #0
			STR R3, [R1]
     290:	e5813000 	str	r3, [r1]

00000294 <CHECK_HEX3>:

CHECK_HEX3:// CHECKS IF HEX3 IS THE REGISTER TO CLEAR BY COMPARING IT TO THE GIVEN INPUT IN R0 IF CONTINUE TO THE CLEAR BRANCH
			TST R0, #0x00000008
     294:	e3100008 	tst	r0, #8
			BEQ CHECK_HEX4
     298:	0a000001 	beq	2a4 <CHECK_HEX4>

0000029c <CLEAR_HEX_3>:

CLEAR_HEX_3: //CLEAR THE SPECIFIC HEX DISPLAY
			MOV R3, #0
     29c:	e3a03000 	mov	r3, #0
			STR R3, [R1]
     2a0:	e5813000 	str	r3, [r1]

000002a4 <CHECK_HEX4>:

CHECK_HEX4:// CHECKS IF HEX4 IS THE REGISTER TO CLEAR BY COMPARING IT TO THE GIVEN INPUT IN R0 IF CONTINUE TO THE CLEAR BRANCH
			TST R0, #0x00000010
     2a4:	e3100010 	tst	r0, #16
			BEQ CHECK_HEX5
     2a8:	0a000001 	beq	2b4 <CHECK_HEX5>

000002ac <CLEAR_HEX_4>:

CLEAR_HEX_4: //CLEAR THE SPECIFIC HEX DISPLAY
			MOV R4, #0
     2ac:	e3a04000 	mov	r4, #0
			STR R4, [R2]
     2b0:	e5824000 	str	r4, [r2]

000002b4 <CHECK_HEX5>:
CHECK_HEX5:// CHECKS IF HEX5 IS THE REGISTER TO CLEAR BY COMPARING IT TO THE GIVEN INPUT IN R0 IF CONTINUE TO THE CLEAR BRANCH
			TST R0, #0x00000020
     2b4:	e3100020 	tst	r0, #32
			BEQ END
     2b8:	0a000001 	beq	2c4 <END>

000002bc <CLEAR_HEX_5>:

CLEAR_HEX_5: //CLEAR THE SPECIFIC HEX DISPLAY	
			MOV R4, #0
     2bc:	e3a04000 	mov	r4, #0
			STR R4, [R2]
     2c0:	e5824000 	str	r4, [r2]

000002c4 <END>:
END:		
			BX LR
     2c4:	e12fff1e 	bx	lr
			.global  HEX_clear_ASM
			
			/*This subroutine clears all the display segments of whichever HEX display is passed in the parameter*/
			/*It does so by simply clearing all display segements by passing 0 to it which turns all segemtns off*/
HEX_clear_ASM: 
			LDR R2, =HEX_5_and_4
     2c8:	ff200030 	.word	0xff200030
			LDR R1, =HEX_0_to_3
     2cc:	ff200020 	.word	0xff200020

000002d0 <HEX_flood_ASM>:
			.equ HEX_3_to_0, 0xFF200020
			.global  HEX_flood_ASM
		

HEX_flood_ASM:  // THIS SUBROUTINE TURNS ON ALL SEGMENTS OF THE DISPLAY THAT HIS PASSED BY THE METHOD CALL
			LDR R1, =HEX_3_to_0 // LOAD THE VALUES OF THE HEX DISPLAY INTO R1 AND R0
     2d0:	e59f10a0 	ldr	r1, [pc, #160]	; 378 <END+0x4>
			LDR R2, =HEX_5_to_4
     2d4:	e59f20a0 	ldr	r2, [pc, #160]	; 37c <END+0x8>
			MOV R6, #0
     2d8:	e3a06000 	mov	r6, #0
			MOV R5, R0
     2dc:	e1a05000 	mov	r5, r0
			MOV R4, R6
     2e0:	e1a04006 	mov	r4, r6
			MOV R3, R6	
     2e4:	e1a03006 	mov	r3, r6

000002e8 <HEX0_CHECK>:
				
HEX0_CHECK: //CHECK IF THE REGISTER TO FLOOD IS HEX0 IF YES RUN THE RESPECTIVE FLOOD
			TST	R0, #0x00000001
     2e8:	e3100001 	tst	r0, #1
			BEQ HEX1_CHECK
     2ec:	0a000002 	beq	2fc <HEX1_CHECK>
			BNE FLOODHEX0
     2f0:	1affffff 	bne	2f4 <FLOODHEX0>

000002f4 <FLOODHEX0>:
FLOODHEX0:  //FLOOD THE RESPECTIVE HEX VALUE
			ADD R3, R3,	#0x0000007F
     2f4:	e283307f 	add	r3, r3, #127	; 0x7f
			STR R3, [R1]
     2f8:	e5813000 	str	r3, [r1]

000002fc <HEX1_CHECK>:
HEX1_CHECK: //CHECK IF THE REGISTER TO FLOOD IS HEX1 IF YES RUN THE RESPECTIVE FLOOD
			MOV R0, R5
     2fc:	e1a00005 	mov	r0, r5
			TST R0, #0x00000002
     300:	e3100002 	tst	r0, #2
			BNE FLOODHEX1
     304:	1a000000 	bne	30c <FLOODHEX1>
			BEQ HEX2_CHECK
     308:	0a000001 	beq	314 <HEX2_CHECK>

0000030c <FLOODHEX1>:
FLOODHEX1://FLOOD THE RESPECTIVE HEX VALUE
			ADD R3, R3, #0x00007F00
     30c:	e2833c7f 	add	r3, r3, #32512	; 0x7f00
			STR R3, [R1]
     310:	e5813000 	str	r3, [r1]

00000314 <HEX2_CHECK>:
HEX2_CHECK: //CHECK IF THE REGISTER TO FLOOD IS HEX2 IF YES RUN THE RESPECTIVE FLOOD
			MOV R0, R5
     314:	e1a00005 	mov	r0, r5
			TST R0, #0x00000004
     318:	e3100004 	tst	r0, #4
			BNE FLOODHEX2
     31c:	1a000000 	bne	324 <FLOODHEX2>
			BEQ HEX3_CHECK
     320:	0a000001 	beq	32c <HEX3_CHECK>

00000324 <FLOODHEX2>:
FLOODHEX2: //FLOOD THE RESPECTIVE HEX VALUE
			ADD R3, R3, #0x007F0000
     324:	e283387f 	add	r3, r3, #8323072	; 0x7f0000
			STR R3, [R1]
     328:	e5813000 	str	r3, [r1]

0000032c <HEX3_CHECK>:
HEX3_CHECK: //CHECK IF THE REGISTER TO FLOOD IS HEX3 IF YES RUN THE RESPECTIVE FLOOD
			MOV R0, R5
     32c:	e1a00005 	mov	r0, r5
			TST R0, #0x00000008
     330:	e3100008 	tst	r0, #8
			BNE FLOODHEX3
     334:	1a000000 	bne	33c <FLOODHEX3>
			BEQ HEX4_CHECK
     338:	0a000001 	beq	344 <HEX4_CHECK>

0000033c <FLOODHEX3>:
FLOODHEX3:
			ADD R3, R3, #0X7F000000
     33c:	e283347f 	add	r3, r3, #2130706432	; 0x7f000000
			STR R3, [R1]
     340:	e5813000 	str	r3, [r1]

00000344 <HEX4_CHECK>:
HEX4_CHECK: //CHECK IF THE REGISTER TO FLOOD IS HEX4 IF YES RUN THE RESPECTIVE FLOOD
			MOV R0, R5
     344:	e1a00005 	mov	r0, r5
			TST R0, #0x00000010
     348:	e3100010 	tst	r0, #16
			BNE FLOODHEX4
     34c:	1a000000 	bne	354 <FLOODHEX4>
			BEQ HEX5_CHECK
     350:	0a000001 	beq	35c <HEX5_CHECK>

00000354 <FLOODHEX4>:
FLOODHEX4: //FLOOD THE RESPECTIVE HEX VALUE
			ADD R4, R4, #0x0000007F
     354:	e284407f 	add	r4, r4, #127	; 0x7f
			STR R4, [R2]
     358:	e5824000 	str	r4, [r2]

0000035c <HEX5_CHECK>:
HEX5_CHECK: //CHECK IF THE REGISTER TO FLOOD IS HEX5 IF YES RUN THE RESPECTIVE FLOOD
			MOV R0, R5
     35c:	e1a00005 	mov	r0, r5
			TST R0, #0x00000020
     360:	e3100020 	tst	r0, #32
			BNE FLOODHEX5
     364:	1a000000 	bne	36c <FLOODHEX5>
			BEQ END
     368:	0a000001 	beq	374 <END>

0000036c <FLOODHEX5>:
FLOODHEX5:	//FLOOD THE RESPECTIVE HEX VALUE	
			ADD R4, R4, #0x00007F00
     36c:	e2844c7f 	add	r4, r4, #32512	; 0x7f00
			STR R4, [R2]
     370:	e5824000 	str	r4, [r2]

00000374 <END>:
END:	
			BX LR
     374:	e12fff1e 	bx	lr
			.equ HEX_3_to_0, 0xFF200020
			.global  HEX_flood_ASM
		

HEX_flood_ASM:  // THIS SUBROUTINE TURNS ON ALL SEGMENTS OF THE DISPLAY THAT HIS PASSED BY THE METHOD CALL
			LDR R1, =HEX_3_to_0 // LOAD THE VALUES OF THE HEX DISPLAY INTO R1 AND R0
     378:	ff200020 	.word	0xff200020
			LDR R2, =HEX_5_to_4
     37c:	ff200030 	.word	0xff200030

00000380 <HEX_write_ASM>:
			.equ HEX_3_to_0, 0xFF200020
			.equ HEX_5_to_4, 0xFF200030
			.global  HEX_write_ASM
			/*This subroutine will display a value between 0-F to which HEX display is passed as the parameter*/
HEX_write_ASM: 
			LDR R2, =HEX_5_to_4	
     380:	e59f2378 	ldr	r2, [pc, #888]	; 700 <END+0x4>
			LDR R6, =HEX_3_to_0
     384:	e59f6378 	ldr	r6, [pc, #888]	; 704 <END+0x8>
			LDR R7, [R6]
     388:	e5967000 	ldr	r7, [r6]
			MOV R4, #0
     38c:	e3a04000 	mov	r4, #0
			LDR R8, [R2]
     390:	e5928000 	ldr	r8, [r2]
			MOV R3, #0
     394:	e3a03000 	mov	r3, #0

00000398 <CHECK_HEX0>:
CHECK_HEX0:
			//Check if Hex0 is the register we want to write to
			CMP	R0, #0x00000001
     398:	e3500001 	cmp	r0, #1
			BEQ WRITE_HEX0
     39c:	0a00000a 	beq	3cc <WRITE_HEX0>

000003a0 <CHECK_HEX1>:
CHECK_HEX1:
			//Check if Hex1 is the register we want to write to
			CMP	R0, #0x00000002
     3a0:	e3500002 	cmp	r0, #2
			BEQ WRITE_HEX1
     3a4:	0a00002a 	beq	454 <WRITE_HEX1>

000003a8 <CHECK_HEX2>:
CHECK_HEX2:
			//Check if Hex2 is the register we want to write to
			CMP R0, #0x00000004
     3a8:	e3500004 	cmp	r0, #4
			BEQ WRITE_HEX2
     3ac:	0a00004a 	beq	4dc <WRITE_HEX2>

000003b0 <CHECK_HEX3>:
CHECK_HEX3:
			//Check if Hex3 is the register we want to write to
			CMP R0, #0x00000008
     3b0:	e3500008 	cmp	r0, #8
			BEQ WRITE_HEX3
     3b4:	0a00006a 	beq	564 <WRITE_HEX3>

000003b8 <CHECK_HEX4>:
CHECK_HEX4:
			//Check if Hex4 is the register we want to write to
			CMP R0, #0x00000010
     3b8:	e3500010 	cmp	r0, #16
			BEQ WRITE_HEX4
     3bc:	0a00008a 	beq	5ec <WRITE_HEX4>

000003c0 <CHECK_HEX5>:
CHECK_HEX5:
			//Check if Hex5 is the register we want to write to
			CMP R0, #0x00000020
     3c0:	e3500020 	cmp	r0, #32
			BEQ WRITE_HEX5
     3c4:	0a0000aa 	beq	674 <WRITE_HEX5>
			BNE END
     3c8:	1a0000cb 	bne	6fc <END>

000003cc <WRITE_HEX0>:

WRITE_HEX0: //Check what to write to the register. The checks are in order from 1 to F
			CMP R1, #0 
     3cc:	e3510000 	cmp	r1, #0
			MOVEQ R3, #0x00003f 
     3d0:	03a0303f 	moveq	r3, #63	; 0x3f
			CMP R1, #1 
     3d4:	e3510001 	cmp	r1, #1
			MOVEQ R3, #0x000006
     3d8:	03a03006 	moveq	r3, #6
			CMP R1, #2 
     3dc:	e3510002 	cmp	r1, #2
			MOVEQ R3, #0x00005b
     3e0:	03a0305b 	moveq	r3, #91	; 0x5b
			CMP R1, #3 
     3e4:	e3510003 	cmp	r1, #3
			MOVEQ R3, #0x00004f
     3e8:	03a0304f 	moveq	r3, #79	; 0x4f
			CMP R1, #4 
     3ec:	e3510004 	cmp	r1, #4
			MOVEQ R3,#0x000066
     3f0:	03a03066 	moveq	r3, #102	; 0x66
			CMP R1, #5 
     3f4:	e3510005 	cmp	r1, #5
			MOVEQ R3, #0x00006d
     3f8:	03a0306d 	moveq	r3, #109	; 0x6d
			CMP R1, #6 
     3fc:	e3510006 	cmp	r1, #6
			MOVEQ R3, #0x00007d
     400:	03a0307d 	moveq	r3, #125	; 0x7d
			CMP R1, #7 
     404:	e3510007 	cmp	r1, #7
			MOVEQ R3, #0x000007
     408:	03a03007 	moveq	r3, #7
			CMP R1, #8 
     40c:	e3510008 	cmp	r1, #8
			MOVEQ R3, #0x00007f
     410:	03a0307f 	moveq	r3, #127	; 0x7f
			CMP R1, #9 
     414:	e3510009 	cmp	r1, #9
			MOVEQ R3, #0x000067
     418:	03a03067 	moveq	r3, #103	; 0x67
			CMP R1, #10 //A
     41c:	e351000a 	cmp	r1, #10
			MOVEQ R3, #0x000077
     420:	03a03077 	moveq	r3, #119	; 0x77
			CMP R1, #11 //B
     424:	e351000b 	cmp	r1, #11
			MOVEQ R3, #0x00007c
     428:	03a0307c 	moveq	r3, #124	; 0x7c
			CMP R1, #12 //C 
     42c:	e351000c 	cmp	r1, #12
			MOVEQ R3, #0x000039
     430:	03a03039 	moveq	r3, #57	; 0x39
			CMP R1, #13 //D
     434:	e351000d 	cmp	r1, #13
			MOVEQ R3, #0x00005e
     438:	03a0305e 	moveq	r3, #94	; 0x5e
			CMP R1, #14 //E 
     43c:	e351000e 	cmp	r1, #14
			MOVEQ R3, #0x000079
     440:	03a03079 	moveq	r3, #121	; 0x79
			CMP R1, #15 //F
     444:	e351000f 	cmp	r1, #15
			MOVEQ R3, #0x000071
     448:	03a03071 	moveq	r3, #113	; 0x71
			STRB R3, [R6]
     44c:	e5c63000 	strb	r3, [r6]
			B CHECK_HEX1
     450:	eaffffd2 	b	3a0 <CHECK_HEX1>

00000454 <WRITE_HEX1>:
WRITE_HEX1:
			//Check what to write to the register. The checks are in order from 1 to F
			CMP R1, #0
     454:	e3510000 	cmp	r1, #0
			MOVEQ R3, #0x00003f 
     458:	03a0303f 	moveq	r3, #63	; 0x3f
			CMP R1, #1
     45c:	e3510001 	cmp	r1, #1
			MOVEQ R3, #0x000006
     460:	03a03006 	moveq	r3, #6
			CMP R1, #2
     464:	e3510002 	cmp	r1, #2
			MOVEQ R3, #0x00005b
     468:	03a0305b 	moveq	r3, #91	; 0x5b
			CMP R1, #3
     46c:	e3510003 	cmp	r1, #3
			MOVEQ R3, #0x00004f
     470:	03a0304f 	moveq	r3, #79	; 0x4f
			CMP R1, #4
     474:	e3510004 	cmp	r1, #4
			MOVEQ R3,#0x000066
     478:	03a03066 	moveq	r3, #102	; 0x66
			CMP R1, #5
     47c:	e3510005 	cmp	r1, #5
			MOVEQ R3, #0x00006d
     480:	03a0306d 	moveq	r3, #109	; 0x6d
			CMP R1, #6
     484:	e3510006 	cmp	r1, #6
			MOVEQ R3, #0x00007d
     488:	03a0307d 	moveq	r3, #125	; 0x7d
			CMP R1, #7
     48c:	e3510007 	cmp	r1, #7
			MOVEQ R3, #0x000007
     490:	03a03007 	moveq	r3, #7
			CMP R1, #8
     494:	e3510008 	cmp	r1, #8
			MOVEQ R3, #0x00007f
     498:	03a0307f 	moveq	r3, #127	; 0x7f
			CMP R1, #9
     49c:	e3510009 	cmp	r1, #9
			MOVEQ R3, #0x000067
     4a0:	03a03067 	moveq	r3, #103	; 0x67
			CMP R1, #10 
     4a4:	e351000a 	cmp	r1, #10
			MOVEQ R3, #0x000077
     4a8:	03a03077 	moveq	r3, #119	; 0x77
			CMP R1, #11 
     4ac:	e351000b 	cmp	r1, #11
			MOVEQ R3, #0x00007c
     4b0:	03a0307c 	moveq	r3, #124	; 0x7c
			CMP R1, #12 
     4b4:	e351000c 	cmp	r1, #12
			MOVEQ R3, #0x000039
     4b8:	03a03039 	moveq	r3, #57	; 0x39
			CMP R1, #13
     4bc:	e351000d 	cmp	r1, #13
			MOVEQ R3, #0x00005e
     4c0:	03a0305e 	moveq	r3, #94	; 0x5e
			CMP R1, #14
     4c4:	e351000e 	cmp	r1, #14
			MOVEQ R3, #0x000079
     4c8:	03a03079 	moveq	r3, #121	; 0x79
			CMP R1, #15
     4cc:	e351000f 	cmp	r1, #15
			MOVEQ R3, #0x000071
     4d0:	03a03071 	moveq	r3, #113	; 0x71
			STRB R3, [R6,#1]
     4d4:	e5c63001 	strb	r3, [r6, #1]
			B CHECK_HEX2
     4d8:	eaffffb2 	b	3a8 <CHECK_HEX2>

000004dc <WRITE_HEX2>:
WRITE_HEX2:
			//Check what to write to the register. The checks are in order from 1 to F
			CMP R1, #0
     4dc:	e3510000 	cmp	r1, #0
			MOVEQ R3, #0x00003f
     4e0:	03a0303f 	moveq	r3, #63	; 0x3f
			CMP R1, #1
     4e4:	e3510001 	cmp	r1, #1
			MOVEQ R3, #0x000006
     4e8:	03a03006 	moveq	r3, #6
			CMP R1, #2
     4ec:	e3510002 	cmp	r1, #2
			MOVEQ R3, #0x00005b
     4f0:	03a0305b 	moveq	r3, #91	; 0x5b
			CMP R1, #3
     4f4:	e3510003 	cmp	r1, #3
			MOVEQ R3, #0x00004f
     4f8:	03a0304f 	moveq	r3, #79	; 0x4f
			CMP R1, #4
     4fc:	e3510004 	cmp	r1, #4
			MOVEQ R3,#0x000066
     500:	03a03066 	moveq	r3, #102	; 0x66
			CMP R1, #5
     504:	e3510005 	cmp	r1, #5
			MOVEQ R3, #0x00006d
     508:	03a0306d 	moveq	r3, #109	; 0x6d
			CMP R1, #6
     50c:	e3510006 	cmp	r1, #6
			MOVEQ R3, #0x00007d
     510:	03a0307d 	moveq	r3, #125	; 0x7d
			CMP R1, #7
     514:	e3510007 	cmp	r1, #7
			MOVEQ R3, #0x000007
     518:	03a03007 	moveq	r3, #7
			CMP R1, #8
     51c:	e3510008 	cmp	r1, #8
			MOVEQ R3, #0x00007f
     520:	03a0307f 	moveq	r3, #127	; 0x7f
			CMP R1, #9
     524:	e3510009 	cmp	r1, #9
			MOVEQ R3, #0x000067
     528:	03a03067 	moveq	r3, #103	; 0x67
			CMP R1, #10
     52c:	e351000a 	cmp	r1, #10
			MOVEQ R3, #0x000077
     530:	03a03077 	moveq	r3, #119	; 0x77
			CMP R1, #11
     534:	e351000b 	cmp	r1, #11
			MOVEQ R3, #0x00007c
     538:	03a0307c 	moveq	r3, #124	; 0x7c
			CMP R1, #12
     53c:	e351000c 	cmp	r1, #12
			MOVEQ R3, #0x000039
     540:	03a03039 	moveq	r3, #57	; 0x39
			CMP R1, #13
     544:	e351000d 	cmp	r1, #13
			MOVEQ R3, #0x00005e
     548:	03a0305e 	moveq	r3, #94	; 0x5e
			CMP R1, #14
     54c:	e351000e 	cmp	r1, #14
			MOVEQ R3, #0x000079
     550:	03a03079 	moveq	r3, #121	; 0x79
			CMP R1, #15
     554:	e351000f 	cmp	r1, #15
			MOVEQ R3, #0x000071
     558:	03a03071 	moveq	r3, #113	; 0x71
			STRB R3, [R6,#2]
     55c:	e5c63002 	strb	r3, [r6, #2]
			B CHECK_HEX3
     560:	eaffff92 	b	3b0 <CHECK_HEX3>

00000564 <WRITE_HEX3>:
WRITE_HEX3:
			//Check what to write to the register. The checks are in order from 1 to F
			CMP R1, #0
     564:	e3510000 	cmp	r1, #0
			MOVEQ R3, #0x00003f
     568:	03a0303f 	moveq	r3, #63	; 0x3f
			CMP R1, #1
     56c:	e3510001 	cmp	r1, #1
			MOVEQ R3, #0x000006
     570:	03a03006 	moveq	r3, #6
			CMP R1, #2
     574:	e3510002 	cmp	r1, #2
			MOVEQ R3, #0x00005b
     578:	03a0305b 	moveq	r3, #91	; 0x5b
			CMP R1, #3
     57c:	e3510003 	cmp	r1, #3
			MOVEQ R3, #0x00004f
     580:	03a0304f 	moveq	r3, #79	; 0x4f
			CMP R1, #4
     584:	e3510004 	cmp	r1, #4
			MOVEQ R3,#0x000066
     588:	03a03066 	moveq	r3, #102	; 0x66
			CMP R1, #5
     58c:	e3510005 	cmp	r1, #5
			MOVEQ R3, #0x00006d
     590:	03a0306d 	moveq	r3, #109	; 0x6d
			CMP R1, #6
     594:	e3510006 	cmp	r1, #6
			MOVEQ R3, #0x00007d
     598:	03a0307d 	moveq	r3, #125	; 0x7d
			CMP R1, #7
     59c:	e3510007 	cmp	r1, #7
			MOVEQ R3, #0x000007
     5a0:	03a03007 	moveq	r3, #7
			CMP R1, #8
     5a4:	e3510008 	cmp	r1, #8
			MOVEQ R3, #0x00007f
     5a8:	03a0307f 	moveq	r3, #127	; 0x7f
			CMP R1, #9
     5ac:	e3510009 	cmp	r1, #9
			MOVEQ R3, #0x000067
     5b0:	03a03067 	moveq	r3, #103	; 0x67
			CMP R1, #10
     5b4:	e351000a 	cmp	r1, #10
			MOVEQ R3, #0x000077
     5b8:	03a03077 	moveq	r3, #119	; 0x77
			CMP R1, #11
     5bc:	e351000b 	cmp	r1, #11
			MOVEQ R3, #0x00007c
     5c0:	03a0307c 	moveq	r3, #124	; 0x7c
			CMP R1, #12
     5c4:	e351000c 	cmp	r1, #12
			MOVEQ R3, #0x000039
     5c8:	03a03039 	moveq	r3, #57	; 0x39
			CMP R1, #13
     5cc:	e351000d 	cmp	r1, #13
			MOVEQ R3, #0x00005e
     5d0:	03a0305e 	moveq	r3, #94	; 0x5e
			CMP R1, #14
     5d4:	e351000e 	cmp	r1, #14
			MOVEQ R3, #0x000079
     5d8:	03a03079 	moveq	r3, #121	; 0x79
			CMP R1, #15
     5dc:	e351000f 	cmp	r1, #15
			MOVEQ R3, #0x000071
     5e0:	03a03071 	moveq	r3, #113	; 0x71
			STRB R3, [R6,#3]
     5e4:	e5c63003 	strb	r3, [r6, #3]
			B CHECK_HEX4
     5e8:	eaffff72 	b	3b8 <CHECK_HEX4>

000005ec <WRITE_HEX4>:
WRITE_HEX4:
			//Check what to write to the register. The checks are in order from 1 to F
			CMP R1, #0
     5ec:	e3510000 	cmp	r1, #0
			MOVEQ R4, #0x0000003f
     5f0:	03a0403f 	moveq	r4, #63	; 0x3f
			CMP R1, #1
     5f4:	e3510001 	cmp	r1, #1
			MOVEQ R4, #0x00000006
     5f8:	03a04006 	moveq	r4, #6
			CMP R1, #2
     5fc:	e3510002 	cmp	r1, #2
			MOVEQ R4, #0x0000005b
     600:	03a0405b 	moveq	r4, #91	; 0x5b
			CMP R1, #3
     604:	e3510003 	cmp	r1, #3
			MOVEQ R4, #0x0000004f
     608:	03a0404f 	moveq	r4, #79	; 0x4f
			CMP R1, #4
     60c:	e3510004 	cmp	r1, #4
			MOVEQ R4, #0x00000066
     610:	03a04066 	moveq	r4, #102	; 0x66
			CMP R1, #5
     614:	e3510005 	cmp	r1, #5
			MOVEQ R4, #0x0000006d
     618:	03a0406d 	moveq	r4, #109	; 0x6d
			CMP R1, #6
     61c:	e3510006 	cmp	r1, #6
			MOVEQ R4, #0x0000007d
     620:	03a0407d 	moveq	r4, #125	; 0x7d
			CMP R1, #7
     624:	e3510007 	cmp	r1, #7
			MOVEQ R4, #0x00000007
     628:	03a04007 	moveq	r4, #7
			CMP R1, #8
     62c:	e3510008 	cmp	r1, #8
			MOVEQ R4, #0x0000007f
     630:	03a0407f 	moveq	r4, #127	; 0x7f
			CMP R1, #9
     634:	e3510009 	cmp	r1, #9
			MOVEQ R4, #0x00000067
     638:	03a04067 	moveq	r4, #103	; 0x67
			CMP R1, #10
     63c:	e351000a 	cmp	r1, #10
			MOVEQ R4, #0x00000077
     640:	03a04077 	moveq	r4, #119	; 0x77
			CMP R1, #11
     644:	e351000b 	cmp	r1, #11
			MOVEQ R4, #0x0000007c
     648:	03a0407c 	moveq	r4, #124	; 0x7c
			CMP R1, #12
     64c:	e351000c 	cmp	r1, #12
			MOVEQ R4, #0x00000039
     650:	03a04039 	moveq	r4, #57	; 0x39
			CMP R1, #13
     654:	e351000d 	cmp	r1, #13
			MOVEQ R4, #0x0000005e
     658:	03a0405e 	moveq	r4, #94	; 0x5e
			CMP R1, #14
     65c:	e351000e 	cmp	r1, #14
			MOVEQ R4, #0x00000079
     660:	03a04079 	moveq	r4, #121	; 0x79
			CMP R1, #15
     664:	e351000f 	cmp	r1, #15
			MOVEQ R4, #0x00000071
     668:	03a04071 	moveq	r4, #113	; 0x71
			STRB R4, [R2]
     66c:	e5c24000 	strb	r4, [r2]
			B CHECK_HEX5
     670:	eaffff52 	b	3c0 <CHECK_HEX5>

00000674 <WRITE_HEX5>:
WRITE_HEX5:
			//Check what to write to the register. The checks are in order from 1 to F
			CMP R1, #0
     674:	e3510000 	cmp	r1, #0
			MOVEQ R4, #0x00003f
     678:	03a0403f 	moveq	r4, #63	; 0x3f
			CMP R1, #1
     67c:	e3510001 	cmp	r1, #1
			MOVEQ R4, #0x000006
     680:	03a04006 	moveq	r4, #6
			CMP R1, #2
     684:	e3510002 	cmp	r1, #2
			MOVEQ R4, #0x00005b
     688:	03a0405b 	moveq	r4, #91	; 0x5b
			CMP R1, #3
     68c:	e3510003 	cmp	r1, #3
			MOVEQ R4, #0x00004f
     690:	03a0404f 	moveq	r4, #79	; 0x4f
			CMP R1, #4
     694:	e3510004 	cmp	r1, #4
			MOVEQ R4,#0x000066
     698:	03a04066 	moveq	r4, #102	; 0x66
			CMP R1, #5
     69c:	e3510005 	cmp	r1, #5
			MOVEQ R4, #0x00006d
     6a0:	03a0406d 	moveq	r4, #109	; 0x6d
			CMP R1, #6
     6a4:	e3510006 	cmp	r1, #6
			MOVEQ R4, #0x00007d
     6a8:	03a0407d 	moveq	r4, #125	; 0x7d
			CMP R1, #7
     6ac:	e3510007 	cmp	r1, #7
			MOVEQ R4, #0x000007
     6b0:	03a04007 	moveq	r4, #7
			CMP R1, #8
     6b4:	e3510008 	cmp	r1, #8
			MOVEQ R4, #0x00007f
     6b8:	03a0407f 	moveq	r4, #127	; 0x7f
			CMP R1, #9
     6bc:	e3510009 	cmp	r1, #9
			MOVEQ R4, #0x000067
     6c0:	03a04067 	moveq	r4, #103	; 0x67
			CMP R1, #10
     6c4:	e351000a 	cmp	r1, #10
			MOVEQ R4, #0x000077
     6c8:	03a04077 	moveq	r4, #119	; 0x77
			CMP R1, #11
     6cc:	e351000b 	cmp	r1, #11
			MOVEQ R4, #0x00007c
     6d0:	03a0407c 	moveq	r4, #124	; 0x7c
			CMP R1, #12
     6d4:	e351000c 	cmp	r1, #12
			MOVEQ R4, #0x000039
     6d8:	03a04039 	moveq	r4, #57	; 0x39
			CMP R1, #13
     6dc:	e351000d 	cmp	r1, #13
			MOVEQ R4, #0x00005e
     6e0:	03a0405e 	moveq	r4, #94	; 0x5e
			CMP R1, #14
     6e4:	e351000e 	cmp	r1, #14
			MOVEQ R4, #0x000079
     6e8:	03a04079 	moveq	r4, #121	; 0x79
			CMP R1, #15
     6ec:	e351000f 	cmp	r1, #15
			MOVEQ R4, #0x000071
     6f0:	03a04071 	moveq	r4, #113	; 0x71
			STRB R4, [R2,#1]
     6f4:	e5c24001 	strb	r4, [r2, #1]
			B END
     6f8:	eaffffff 	b	6fc <END>

000006fc <END>:
END:		BX LR
     6fc:	e12fff1e 	bx	lr
			.equ HEX_3_to_0, 0xFF200020
			.equ HEX_5_to_4, 0xFF200030
			.global  HEX_write_ASM
			/*This subroutine will display a value between 0-F to which HEX display is passed as the parameter*/
HEX_write_ASM: 
			LDR R2, =HEX_5_to_4	
     700:	ff200030 	.word	0xff200030
			LDR R6, =HEX_3_to_0
     704:	ff200020 	.word	0xff200020

00000708 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
     708:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
     70c:	e3a01000 	mov	r1, #0
	MOV R2, #1
     710:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
     714:	e5907000 	ldr	r7, [r0]
	B LOOP
     718:	eaffffff 	b	71c <LOOP>

0000071c <LOOP>:

LOOP:
	TST R7, R2, LSL R1
     71c:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
     720:	0a000000 	beq	728 <CONTINUE>
	BL CONFIG
     724:	eb000004 	bl	73c <CONFIG>

00000728 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
     728:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     72c:	e3510004 	cmp	r1, #4
	BLT LOOP
     730:	bafffff9 	blt	71c <LOOP>

00000734 <DONE>:

DONE:
	POP {R4-R7, LR}
     734:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
     738:	e12fff1e 	bx	lr

0000073c <CONFIG>:


CONFIG:
	PUSH {LR}
     73c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
     740:	e59f3148 	ldr	r3, [pc, #328]	; 890 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
     744:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
     748:	eb000005 	bl	764 <DISABLE>
	BL SET_LOAD_VAL
     74c:	eb000008 	bl	774 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
     750:	eb00000e 	bl	790 <SET_LOAD_BIT>
	BL SET_INT_BIT
     754:	eb000013 	bl	7a8 <SET_INT_BIT>
	BL SET_EN_BIT
     758:	eb000019 	bl	7c4 <SET_EN_BIT>
	
	POP {LR}
     75c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     760:	e12fff1e 	bx	lr

00000764 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
     764:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
     768:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
     76c:	e5845008 	str	r5, [r4, #8]
	BX LR
     770:	e12fff1e 	bx	lr

00000774 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
     774:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
     778:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
     77c:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
     780:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
     784:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
     788:	e5845000 	str	r5, [r4]
	BX LR
     78c:	e12fff1e 	bx	lr

00000790 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
     790:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
     794:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
     798:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
     79c:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
     7a0:	e5845008 	str	r5, [r4, #8]
	BX LR
     7a4:	e12fff1e 	bx	lr

000007a8 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
     7a8:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
     7ac:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
     7b0:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
     7b4:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
     7b8:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
     7bc:	e5845008 	str	r5, [r4, #8]
	BX LR
     7c0:	e12fff1e 	bx	lr

000007c4 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
     7c4:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
     7c8:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
     7cc:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
     7d0:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
     7d4:	e5845008 	str	r5, [r4, #8]
	BX LR
     7d8:	e12fff1e 	bx	lr

000007dc <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
     7dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
     7e0:	e3a01000 	mov	r1, #0
	MOV R2, #1
     7e4:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
     7e8:	eaffffff 	b	7ec <CLEAR_INT_LOOP>

000007ec <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
     7ec:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
     7f0:	0a000000 	beq	7f8 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
     7f4:	eb000005 	bl	810 <CLEAR_INT>

000007f8 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
     7f8:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     7fc:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
     800:	bafffff9 	blt	7ec <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
     804:	eaffffff 	b	808 <CLEAR_INT_DONE>

00000808 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
     808:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     80c:	e12fff1e 	bx	lr

00000810 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
     810:	e59f3078 	ldr	r3, [pc, #120]	; 890 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     814:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
     818:	e593300c 	ldr	r3, [r3, #12]
	BX LR
     81c:	e12fff1e 	bx	lr

00000820 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
     820:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
     824:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
     828:	e3a01000 	mov	r1, #0
	MOV R2, #1
     82c:	e3a02001 	mov	r2, #1
	MOV R4, #0
     830:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
     834:	eaffffff 	b	838 <READ_INT_LOOP>

00000838 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
     838:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
     83c:	0a000000 	beq	844 <READ_INT_CONTINUE>
	BL READ_INT
     840:	eb000008 	bl	868 <READ_INT>

00000844 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
     844:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     848:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
     84c:	0a000001 	beq	858 <READ_INT_DONE>
	LSL R4, R4, #1
     850:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
     854:	eafffff7 	b	838 <READ_INT_LOOP>

00000858 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
     858:	e1a00004 	mov	r0, r4
	POP {R4}
     85c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
     860:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     864:	e12fff1e 	bx	lr

00000868 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
     868:	e59f3020 	ldr	r3, [pc, #32]	; 890 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     86c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
     870:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
     874:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
     878:	e0244003 	eor	r4, r4, r3
	BX LR
     87c:	e12fff1e 	bx	lr

00000880 <HPS_TIM_BASE>:
     880:	ffc08000 	.word	0xffc08000
     884:	ffc09000 	.word	0xffc09000
     888:	ffd00000 	.word	0xffd00000
     88c:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
     890:	00000880 	.word	0x00000880

00000894 <hps_tim0_int_flag>:
     894:	00000000 	.word	0x00000000

00000898 <PB_int_flag>:
     898:	00000000 	.word	0x00000000

0000089c <A9_PRIV_TIM_ISR>:
hps_tim0_int_flag:
	.word 0x0
PB_int_flag:
	.word 0x0
A9_PRIV_TIM_ISR:
	BX LR
     89c:	e12fff1e 	bx	lr

000008a0 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     8a0:	e12fff1e 	bx	lr

000008a4 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     8a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV	R0, #0x1
     8a8:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
     8ac:	ebffffca 	bl	7dc <HPS_TIM_clear_INT_ASM>
	LDR R0,=hps_tim0_int_flag
     8b0:	e59f009c 	ldr	r0, [pc, #156]	; 954 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1,#1
     8b4:	e3a01001 	mov	r1, #1
	STR R1,[R0]
     8b8:	e5801000 	str	r1, [r0]
	POP {LR}
     8bc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     8c0:	e12fff1e 	bx	lr

000008c4 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     8c4:	e12fff1e 	bx	lr

000008c8 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     8c8:	e12fff1e 	bx	lr

000008cc <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     8cc:	e12fff1e 	bx	lr

000008d0 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     8d0:	e12fff1e 	bx	lr

000008d4 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
     8d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R0,=0XFF200050			
     8d8:	e59f0078 	ldr	r0, [pc, #120]	; 958 <FPGA_PS2_DUAL_ISR+0x8>
	LDR R1,[R0, #0xC]			
     8dc:	e590100c 	ldr	r1, [r0, #12]
	STR R1,[R0, #0xC]			
     8e0:	e580100c 	str	r1, [r0, #12]
	LDR R0,=PB_int_flag	
     8e4:	e59f0070 	ldr	r0, [pc, #112]	; 95c <FPGA_PS2_DUAL_ISR+0xc>

000008e8 <IF_PB0_PRESSED>:
IF_PB0_PRESSED:
	MOV R3,#0x1
     8e8:	e3a03001 	mov	r3, #1
	AND R3,R3, R1
     8ec:	e0033001 	and	r3, r3, r1
	CMP R3,#0
     8f0:	e3530000 	cmp	r3, #0
	BEQ IF_PB1_PRESSED
     8f4:	0a000002 	beq	904 <IF_PB1_PRESSED>
	MOV R2,#0
     8f8:	e3a02000 	mov	r2, #0
	STR R2,[R0]
     8fc:	e5802000 	str	r2, [r0]
	B END_KEY_ISR
     900:	ea00000a 	b	930 <END_KEY_ISR>

00000904 <IF_PB1_PRESSED>:
IF_PB1_PRESSED:
	MOV R3,#0x2
     904:	e3a03002 	mov	r3, #2
	AND R3,R3,R1
     908:	e0033001 	and	r3, r3, r1
	CMP R3,#0
     90c:	e3530000 	cmp	r3, #0
	BEQ IF_PB2_PRESSED
     910:	0a000002 	beq	920 <IF_PB2_PRESSED>
	MOV R2,#1
     914:	e3a02001 	mov	r2, #1
	STR R2,[R0]
     918:	e5802000 	str	r2, [r0]
	B END_KEY_ISR
     91c:	ea000003 	b	930 <END_KEY_ISR>

00000920 <IF_PB2_PRESSED>:
IF_PB2_PRESSED:
	MOV R3,#0x4
     920:	e3a03004 	mov	r3, #4
	AND R3,R1
     924:	e0033001 	and	r3, r3, r1
	MOV R2,#2
     928:	e3a02002 	mov	r2, #2
	STR R2,[R0]
     92c:	e5802000 	str	r2, [r0]

00000930 <END_KEY_ISR>:
END_KEY_ISR:
	POP {LR}
     930:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     934:	e12fff1e 	bx	lr

00000938 <FPGA_Audio_ISR>:
FPGA_Audio_ISR:
	BX LR
     938:	e12fff1e 	bx	lr

0000093c <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     93c:	e12fff1e 	bx	lr

00000940 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     940:	e12fff1e 	bx	lr

00000944 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     944:	e12fff1e 	bx	lr

00000948 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     948:	e12fff1e 	bx	lr

0000094c <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     94c:	e12fff1e 	bx	lr

00000950 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     950:	e12fff1e 	bx	lr
	
HPS_TIM0_ISR:
	PUSH {LR}
	MOV	R0, #0x1
	BL HPS_TIM_clear_INT_ASM
	LDR R0,=hps_tim0_int_flag
     954:	00000894 	.word	0x00000894
FPGA_INTERVAL_TIM_ISR:
	BX LR
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
	LDR R0,=0XFF200050			
     958:	ff200050 	.word	0xff200050
	LDR R1,[R0, #0xC]			
	STR R1,[R0, #0xC]			
	LDR R0,=PB_int_flag	
     95c:	00000898 	.word	0x00000898

00000960 <read_LEDs_ASM>:
	.equ LED_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, =LED_BASE
     960:	e59f1010 	ldr	r1, [pc, #16]	; 978 <write_LEDs_ASM+0xc>
	LDR R0, [R1]
     964:	e5910000 	ldr	r0, [r1]
	BX LR
     968:	e12fff1e 	bx	lr

0000096c <write_LEDs_ASM>:

write_LEDs_ASM:
	LDR R1, =LED_BASE
     96c:	e59f1004 	ldr	r1, [pc, #4]	; 978 <write_LEDs_ASM+0xc>
	STR R0, [R1]
     970:	e5810000 	str	r0, [r1]
	BX LR
     974:	e12fff1e 	bx	lr
	.equ LED_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, =LED_BASE
     978:	ff200000 	.word	0xff200000

0000097c <read_PB_data_ASM>:
			.equ PB_INT_EDGECAPTURE, 0xFF200058
			.global read_PB_data_ASM, read_PB_edgecap_ASM, PB_clear_edgecp_ASM,PB_edgecap_is_pressed_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM
			.global PB_data_is_pressed_ASM

read_PB_data_ASM: //Read push button data from PB_BASE into R2 and store it in the return register R0
			LDR R2, =PB_BASE			
     97c:	e59f2070 	ldr	r2, [pc, #112]	; 9f4 <disable_PB_INT_ASM+0xc>
			LDR R0, [R2]	
     980:	e5920000 	ldr	r0, [r2]
			BX LR //Return
     984:	e12fff1e 	bx	lr

00000988 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM: //READ THE EDGECAPTURE DATA FROM PB_EDGECAPTURE INTO R2  
			LDR R2, =PB_EDGECAPTURE  
     988:	e59f2068 	ldr	r2, [pc, #104]	; 9f8 <disable_PB_INT_ASM+0x10>
			LDR R0, [R2] //LOAD THE RETURN VALUE INTO REGISTER R0
     98c:	e5920000 	ldr	r0, [r2]
			BX LR
     990:	e12fff1e 	bx	lr

00000994 <PB_edgecap_is_pressed_ASM>:
PB_edgecap_is_pressed_ASM:
			LDR R2, =PB_EDGECAPTURE
     994:	e59f205c 	ldr	r2, [pc, #92]	; 9f8 <disable_PB_INT_ASM+0x10>
			LDR R2, [R2]
     998:	e5922000 	ldr	r2, [r2]
			TST R0, R2
     99c:	e1100002 	tst	r0, r2
			BEQ RETURN_0
     9a0:	0a000001 	beq	9ac <RETURN_0>

000009a4 <RETURN_2>:
RETURN_2:	MOV R0, #2 //put a value different then 0 for the detection of a capture edge
     9a4:	e3a00002 	mov	r0, #2
			BX LR
     9a8:	e12fff1e 	bx	lr

000009ac <RETURN_0>:
RETURN_0:	MOV R0, #0 //put a value of 0 for no edgecapture
     9ac:	e3a00000 	mov	r0, #0
			BX LR
     9b0:	e12fff1e 	bx	lr

000009b4 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
			LDR R3, =PB_BASE	
     9b4:	e59f3038 	ldr	r3, [pc, #56]	; 9f4 <disable_PB_INT_ASM+0xc>
			LDR R3, [R3]			
     9b8:	e5933000 	ldr	r3, [r3]
			TST R3, R0				//CHECK IF THE PUSHBUTTON IS 1 IN MEMORY
     9bc:	e1130000 	tst	r3, r0
			MOVEQ R0, #0			//IF NOT STORE 0 IN R0
     9c0:	03a00000 	moveq	r0, #0
			BXEQ LR					// RETURN
     9c4:	012fff1e 	bxeq	lr
			MOV R0, #1				//IF YES STORE 1 IN R0
     9c8:	e3a00001 	mov	r0, #1
			BX LR					//RETURN
     9cc:	e12fff1e 	bx	lr

000009d0 <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM:
			LDR R3, =PB_EDGECAPTURE
     9d0:	e59f3020 	ldr	r3, [pc, #32]	; 9f8 <disable_PB_INT_ASM+0x10>
			STR R0, [R3] //STORE THE EDGE CAPTURE MEMORY INTO THE RETURN REGISTER R0
     9d4:	e5830000 	str	r0, [r3]
			BX LR
     9d8:	e12fff1e 	bx	lr

000009dc <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
			LDR R2, =PB_INT_EDGECAPTURE	
     9dc:	e59f2018 	ldr	r2, [pc, #24]	; 9fc <disable_PB_INT_ASM+0x14>
			STR R0, [R2] //STORE INTO INETERUPT EDGE CAPTURE MEMORY FROM R0
     9e0:	e5820000 	str	r0, [r2]
			BX LR
     9e4:	e12fff1e 	bx	lr

000009e8 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
			LDR R1, =PB_INT_EDGECAPTURE		//LOAD THE INTERUPT REGISTER INTO R1
     9e8:	e59f100c 	ldr	r1, [pc, #12]	; 9fc <disable_PB_INT_ASM+0x14>
			STR R0,[R1]						//STORE INTO INETERUPT EDGE CAPTURE MEMORY FROM R0
     9ec:	e5810000 	str	r0, [r1]
			BX LR
     9f0:	e12fff1e 	bx	lr
			.equ PB_INT_EDGECAPTURE, 0xFF200058
			.global read_PB_data_ASM, read_PB_edgecap_ASM, PB_clear_edgecp_ASM,PB_edgecap_is_pressed_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM
			.global PB_data_is_pressed_ASM

read_PB_data_ASM: //Read push button data from PB_BASE into R2 and store it in the return register R0
			LDR R2, =PB_BASE			
     9f4:	ff200050 	.word	0xff200050
			LDR R0, [R2]	
			BX LR //Return

read_PB_edgecap_ASM: //READ THE EDGECAPTURE DATA FROM PB_EDGECAPTURE INTO R2  
			LDR R2, =PB_EDGECAPTURE  
     9f8:	ff20005c 	.word	0xff20005c
			LDR R3, =PB_EDGECAPTURE
			STR R0, [R3] //STORE THE EDGE CAPTURE MEMORY INTO THE RETURN REGISTER R0
			BX LR

enable_PB_INT_ASM:
			LDR R2, =PB_INT_EDGECAPTURE	
     9fc:	ff200058 	.word	0xff200058

00000a00 <read_slider_switches_ASM>:
		.text
		.equ SW_BASE, 0xFF200040
		.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
     a00:	e59f1004 	ldr	r1, [pc, #4]	; a0c <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
     a04:	e5910000 	ldr	r0, [r1]
	BX LR
     a08:	e12fff1e 	bx	lr
		.text
		.equ SW_BASE, 0xFF200040
		.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
     a0c:	ff200040 	.word	0xff200040

00000a10 <main>:
#include "./drivers/inc/ISRs.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/pushbuttons.h"

int main(){
     a10:	e92d4800 	push	{r11, lr}
     a14:	e28db004 	add	r11, sp, #4
     a18:	e24dd038 	sub	sp, sp, #56	; 0x38
	//set up the specific interups devices
	int numbers[] = {73, 199};
     a1c:	e3013564 	movw	r3, #5476	; 0x1564
     a20:	e3403000 	movt	r3, #0
     a24:	e24b2024 	sub	r2, r11, #36	; 0x24
     a28:	e8930003 	ldm	r3, {r0, r1}
     a2c:	e8820003 	stm	r2, {r0, r1}
	int_setup(2, numbers);
     a30:	e24b3024 	sub	r3, r11, #36	; 0x24
     a34:	e3a00002 	mov	r0, #2
     a38:	e1a01003 	mov	r1, r3
     a3c:	eb0001b2 	bl	110c <int_setup>
	//We create an integer to hold the value of each digit
	int digit0 = 0, digit1=0,digit2=0,digit3=0,digit4=0,digit5=0;
     a40:	e3a03000 	mov	r3, #0
     a44:	e50b3008 	str	r3, [r11, #-8]
     a48:	e3a03000 	mov	r3, #0
     a4c:	e50b300c 	str	r3, [r11, #-12]
     a50:	e3a03000 	mov	r3, #0
     a54:	e50b3010 	str	r3, [r11, #-16]
     a58:	e3a03000 	mov	r3, #0
     a5c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     a60:	e3a03000 	mov	r3, #0
     a64:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     a68:	e3a03000 	mov	r3, #0
     a6c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	
	//We create a HPS_TIM_t struct to initialise our main timer
	//We give it a timeout of 10ms and set all other fields to 0 because we do not want our timer to start before we press the button
	HPS_TIM_config_t timer0;
	timer0.tim = TIM0;
     a70:	e3a03001 	mov	r3, #1
     a74:	e54b3038 	strb	r3, [r11, #-56]	; 0xffffffc8
	timer0.LD_en = 0;
     a78:	e3a03000 	mov	r3, #0
     a7c:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
	timer0.timeout = 10000;	
     a80:	e3023710 	movw	r3, #10000	; 0x2710
     a84:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
	timer0.INT_en = 0;
     a88:	e3a03000 	mov	r3, #0
     a8c:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	timer0.enable = 0;
     a90:	e3a03000 	mov	r3, #0
     a94:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	HPS_TIM_config_ASM(&timer0);
     a98:	e24b3038 	sub	r3, r11, #56	; 0x38
     a9c:	e1a00003 	mov	r0, r3
     aa0:	ebffff18 	bl	708 <HPS_TIM_config_ASM>
	//Enable interrupts for specific buttons
	enable_PB_INT_ASM(PB0|PB2|PB1);
     aa4:	e3a00007 	mov	r0, #7
     aa8:	ebffffcb 	bl	9dc <enable_PB_INT_ASM>
	//set a flag and initialise it to 4
	PB_int_flag = 4;
     aac:	e3003898 	movw	r3, #2200	; 0x898
     ab0:	e3403000 	movt	r3, #0
     ab4:	e3a02004 	mov	r2, #4
     ab8:	e5832000 	str	r2, [r3]
     abc:	ea000000 	b	ac4 <main+0xb4>
					HEX_write_ASM(HEX3,digit3);
					HEX_write_ASM(HEX2,digit2);
					HEX_write_ASM(HEX1,digit1);
					HEX_write_ASM(HEX0,digit0);
				}
	}
     ac0:	e1a00000 	nop			; (mov r0, r0)
	//set a flag and initialise it to 4
	PB_int_flag = 4;

	while(1){
		
		if(PB_int_flag >= 0){
     ac4:	e3003898 	movw	r3, #2200	; 0x898
     ac8:	e3403000 	movt	r3, #0
     acc:	e5933000 	ldr	r3, [r3]
     ad0:	e3530000 	cmp	r3, #0
     ad4:	ba000049 	blt	c00 <main+0x1f0>
			if(PB_int_flag == 0){
     ad8:	e3003898 	movw	r3, #2200	; 0x898
     adc:	e3403000 	movt	r3, #0
     ae0:	e5933000 	ldr	r3, [r3]
     ae4:	e3530000 	cmp	r3, #0
     ae8:	1a00000c 	bne	b20 <main+0x110>
				//if the buton pressed is the button 0 then start the first timer 
					timer0.LD_en = 1;
     aec:	e3a03001 	mov	r3, #1
     af0:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
					timer0.INT_en = 1;
     af4:	e3a03001 	mov	r3, #1
     af8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
					timer0.enable = 1;
     afc:	e3a03001 	mov	r3, #1
     b00:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
					HPS_TIM_config_ASM(&timer0); // reload configurations
     b04:	e24b3038 	sub	r3, r11, #56	; 0x38
     b08:	e1a00003 	mov	r0, r3
     b0c:	ebfffefd 	bl	708 <HPS_TIM_config_ASM>
					PB_int_flag = 4; //reset the flag
     b10:	e3003898 	movw	r3, #2200	; 0x898
     b14:	e3403000 	movt	r3, #0
     b18:	e3a02004 	mov	r2, #4
     b1c:	e5832000 	str	r2, [r3]
				}
				if(PB_int_flag == 2){
     b20:	e3003898 	movw	r3, #2200	; 0x898
     b24:	e3403000 	movt	r3, #0
     b28:	e5933000 	ldr	r3, [r3]
     b2c:	e3530002 	cmp	r3, #2
     b30:	1a000020 	bne	bb8 <main+0x1a8>
				//if the button pressed is the button 2 then stop the timer and reset the digit counts 
					timer0.LD_en = 0;
     b34:	e3a03000 	mov	r3, #0
     b38:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
					timer0.INT_en = 0;
     b3c:	e3a03000 	mov	r3, #0
     b40:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
					timer0.enable = 0;
     b44:	e3a03000 	mov	r3, #0
     b48:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
					HPS_TIM_config_ASM(&timer0); //reload configurations
     b4c:	e24b3038 	sub	r3, r11, #56	; 0x38
     b50:	e1a00003 	mov	r0, r3
     b54:	ebfffeeb 	bl	708 <HPS_TIM_config_ASM>
					if(HPS_TIM_read_INT_ASM(timer0.tim) == 0){
     b58:	e55b3038 	ldrb	r3, [r11, #-56]	; 0xffffffc8
     b5c:	e1a00003 	mov	r0, r3
     b60:	ebffff2e 	bl	820 <HPS_TIM_read_INT_ASM>
     b64:	e1a03000 	mov	r3, r0
     b68:	e3530000 	cmp	r3, #0
     b6c:	1a000001 	bne	b78 <main+0x168>
						HEX_flood_ASM(HEX0|HEX1|HEX2|HEX3|HEX4|HEX5);				
     b70:	e3a0003f 	mov	r0, #63	; 0x3f
     b74:	ebfffdd5 	bl	2d0 <HEX_flood_ASM>
					}
					digit0 = 0, digit1=0, digit2=0, digit3=0, digit4=0, digit5=0;
     b78:	e3a03000 	mov	r3, #0
     b7c:	e50b3008 	str	r3, [r11, #-8]
     b80:	e3a03000 	mov	r3, #0
     b84:	e50b300c 	str	r3, [r11, #-12]
     b88:	e3a03000 	mov	r3, #0
     b8c:	e50b3010 	str	r3, [r11, #-16]
     b90:	e3a03000 	mov	r3, #0
     b94:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     b98:	e3a03000 	mov	r3, #0
     b9c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     ba0:	e3a03000 	mov	r3, #0
     ba4:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
					PB_int_flag = 4; //reset the flag
     ba8:	e3003898 	movw	r3, #2200	; 0x898
     bac:	e3403000 	movt	r3, #0
     bb0:	e3a02004 	mov	r2, #4
     bb4:	e5832000 	str	r2, [r3]
				}
				if(PB_int_flag == 1){
     bb8:	e3003898 	movw	r3, #2200	; 0x898
     bbc:	e3403000 	movt	r3, #0
     bc0:	e5933000 	ldr	r3, [r3]
     bc4:	e3530001 	cmp	r3, #1
     bc8:	1a00000c 	bne	c00 <main+0x1f0>
					//if the button pressed is the button 1 then pause the timer
					timer0.LD_en = 0;
     bcc:	e3a03000 	mov	r3, #0
     bd0:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
					timer0.INT_en = 0;
     bd4:	e3a03000 	mov	r3, #0
     bd8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
					timer0.enable = 0;
     bdc:	e3a03000 	mov	r3, #0
     be0:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
					HPS_TIM_config_ASM(&timer0);
     be4:	e24b3038 	sub	r3, r11, #56	; 0x38
     be8:	e1a00003 	mov	r0, r3
     bec:	ebfffec5 	bl	708 <HPS_TIM_config_ASM>
					PB_int_flag = 4; //reset the flag
     bf0:	e3003898 	movw	r3, #2200	; 0x898
     bf4:	e3403000 	movt	r3, #0
     bf8:	e3a02004 	mov	r2, #4
     bfc:	e5832000 	str	r2, [r3]
				}
			}
					if(hps_tim0_int_flag){
     c00:	e3003894 	movw	r3, #2196	; 0x894
     c04:	e3403000 	movt	r3, #0
     c08:	e5933000 	ldr	r3, [r3]
     c0c:	e3530000 	cmp	r3, #0
     c10:	0affffaa 	beq	ac0 <main+0xb0>
					hps_tim0_int_flag = 0;
     c14:	e3003894 	movw	r3, #2196	; 0x894
     c18:	e3403000 	movt	r3, #0
     c1c:	e3a02000 	mov	r2, #0
     c20:	e5832000 	str	r2, [r3]
						if(++digit0 == 10){ //REFRESH THE VALUES ON THE SCREEN DEPENDING ON THE DIGIT COUNT
     c24:	e51b3008 	ldr	r3, [r11, #-8]
     c28:	e2833001 	add	r3, r3, #1
     c2c:	e50b3008 	str	r3, [r11, #-8]
     c30:	e51b3008 	ldr	r3, [r11, #-8]
     c34:	e353000a 	cmp	r3, #10
     c38:	1a000029 	bne	ce4 <main+0x2d4>
							digit0 = 0;
     c3c:	e3a03000 	mov	r3, #0
     c40:	e50b3008 	str	r3, [r11, #-8]
							if(++digit1==10){
     c44:	e51b300c 	ldr	r3, [r11, #-12]
     c48:	e2833001 	add	r3, r3, #1
     c4c:	e50b300c 	str	r3, [r11, #-12]
     c50:	e51b300c 	ldr	r3, [r11, #-12]
     c54:	e353000a 	cmp	r3, #10
     c58:	1a000021 	bne	ce4 <main+0x2d4>
								digit1=0;
     c5c:	e3a03000 	mov	r3, #0
     c60:	e50b300c 	str	r3, [r11, #-12]
								if(++digit2==10){
     c64:	e51b3010 	ldr	r3, [r11, #-16]
     c68:	e2833001 	add	r3, r3, #1
     c6c:	e50b3010 	str	r3, [r11, #-16]
     c70:	e51b3010 	ldr	r3, [r11, #-16]
     c74:	e353000a 	cmp	r3, #10
     c78:	1a000019 	bne	ce4 <main+0x2d4>
									digit2=0;
     c7c:	e3a03000 	mov	r3, #0
     c80:	e50b3010 	str	r3, [r11, #-16]
									if(++digit3==6){
     c84:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     c88:	e2833001 	add	r3, r3, #1
     c8c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     c90:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     c94:	e3530006 	cmp	r3, #6
     c98:	1a000011 	bne	ce4 <main+0x2d4>
										digit3=0;
     c9c:	e3a03000 	mov	r3, #0
     ca0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
										if(++digit4==10){
     ca4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     ca8:	e2833001 	add	r3, r3, #1
     cac:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     cb0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     cb4:	e353000a 	cmp	r3, #10
     cb8:	1a000009 	bne	ce4 <main+0x2d4>
											digit4 = 0;
     cbc:	e3a03000 	mov	r3, #0
     cc0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
											if(++digit5==6){
     cc4:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     cc8:	e2833001 	add	r3, r3, #1
     ccc:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     cd0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     cd4:	e3530006 	cmp	r3, #6
     cd8:	1a000001 	bne	ce4 <main+0x2d4>
												digit5=0;
     cdc:	e3a03000 	mov	r3, #0
     ce0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
									}
								}
							}
						}
					}
					HEX_write_ASM(HEX5,digit5);
     ce4:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     ce8:	e6ef3073 	uxtb	r3, r3
     cec:	e3a00020 	mov	r0, #32
     cf0:	e1a01003 	mov	r1, r3
     cf4:	ebfffda1 	bl	380 <HEX_write_ASM>
					HEX_write_ASM(HEX4,digit4);
     cf8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     cfc:	e6ef3073 	uxtb	r3, r3
     d00:	e3a00010 	mov	r0, #16
     d04:	e1a01003 	mov	r1, r3
     d08:	ebfffd9c 	bl	380 <HEX_write_ASM>
					HEX_write_ASM(HEX3,digit3);
     d0c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     d10:	e6ef3073 	uxtb	r3, r3
     d14:	e3a00008 	mov	r0, #8
     d18:	e1a01003 	mov	r1, r3
     d1c:	ebfffd97 	bl	380 <HEX_write_ASM>
					HEX_write_ASM(HEX2,digit2);
     d20:	e51b3010 	ldr	r3, [r11, #-16]
     d24:	e6ef3073 	uxtb	r3, r3
     d28:	e3a00004 	mov	r0, #4
     d2c:	e1a01003 	mov	r1, r3
     d30:	ebfffd92 	bl	380 <HEX_write_ASM>
					HEX_write_ASM(HEX1,digit1);
     d34:	e51b300c 	ldr	r3, [r11, #-12]
     d38:	e6ef3073 	uxtb	r3, r3
     d3c:	e3a00002 	mov	r0, #2
     d40:	e1a01003 	mov	r1, r3
     d44:	ebfffd8d 	bl	380 <HEX_write_ASM>
					HEX_write_ASM(HEX0,digit0);
     d48:	e51b3008 	ldr	r3, [r11, #-8]
     d4c:	e6ef3073 	uxtb	r3, r3
     d50:	e3a00001 	mov	r0, #1
     d54:	e1a01003 	mov	r1, r3
     d58:	ebfffd88 	bl	380 <HEX_write_ASM>
				}
	}
     d5c:	eaffff57 	b	ac0 <main+0xb0>

00000d60 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     d60:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d64:	e28db000 	add	r11, sp, #0
     d68:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     d6c:	e3a030d3 	mov	r3, #211	; 0xd3
     d70:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     d74:	e51b3008 	ldr	r3, [r11, #-8]
     d78:	e129f003 	msr	CPSR_fc, r3
}
     d7c:	e28bd000 	add	sp, r11, #0
     d80:	e8bd0800 	ldmfd	sp!, {r11}
     d84:	e12fff1e 	bx	lr

00000d88 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     d88:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d8c:	e28db000 	add	r11, sp, #0
     d90:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     d94:	e3a03053 	mov	r3, #83	; 0x53
     d98:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     d9c:	e51b3008 	ldr	r3, [r11, #-8]
     da0:	e129f003 	msr	CPSR_fc, r3
}
     da4:	e28bd000 	add	sp, r11, #0
     da8:	e8bd0800 	ldmfd	sp!, {r11}
     dac:	e12fff1e 	bx	lr

00000db0 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     db0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     db4:	e28db000 	add	r11, sp, #0
     db8:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     dbc:	e3e03007 	mvn	r3, #7
     dc0:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     dc4:	e3a030d2 	mov	r3, #210	; 0xd2
     dc8:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     dcc:	e51b300c 	ldr	r3, [r11, #-12]
     dd0:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     dd4:	e51b3008 	ldr	r3, [r11, #-8]
     dd8:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     ddc:	e3a030d3 	mov	r3, #211	; 0xd3
     de0:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     de4:	e51b300c 	ldr	r3, [r11, #-12]
     de8:	e129f003 	msr	CPSR_fc, r3
}
     dec:	e28bd000 	add	sp, r11, #0
     df0:	e8bd0800 	ldmfd	sp!, {r11}
     df4:	e12fff1e 	bx	lr

00000df8 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     df8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     dfc:	e28db000 	add	r11, sp, #0
     e00:	e24dd01c 	sub	sp, sp, #28
     e04:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     e08:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     e0c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     e10:	e1a031c3 	asr	r3, r3, #3
     e14:	e3c33003 	bic	r3, r3, #3
     e18:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     e1c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     e20:	e203301f 	and	r3, r3, #31
     e24:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     e28:	e3a02001 	mov	r2, #1
     e2c:	e51b300c 	ldr	r3, [r11, #-12]
     e30:	e1a03312 	lsl	r3, r2, r3
     e34:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     e38:	e51b3008 	ldr	r3, [r11, #-8]
     e3c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     e40:	e2433c03 	sub	r3, r3, #768	; 0x300
     e44:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     e48:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     e4c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     e50:	e5921000 	ldr	r1, [r2]
     e54:	e51b2010 	ldr	r2, [r11, #-16]
     e58:	e1812002 	orr	r2, r1, r2
     e5c:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     e60:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     e64:	e3c33003 	bic	r3, r3, #3
     e68:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     e6c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     e70:	e2033003 	and	r3, r3, #3
     e74:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     e78:	e51b2008 	ldr	r2, [r11, #-8]
     e7c:	e51b300c 	ldr	r3, [r11, #-12]
     e80:	e0823003 	add	r3, r2, r3
     e84:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     e88:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     e8c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     e90:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     e94:	e6ef2072 	uxtb	r2, r2
     e98:	e5c32000 	strb	r2, [r3]
}
     e9c:	e28bd000 	add	sp, r11, #0
     ea0:	e8bd0800 	ldmfd	sp!, {r11}
     ea4:	e12fff1e 	bx	lr

00000ea8 <config_GIC>:

void config_GIC(int len, int* IDs) {
     ea8:	e92d4800 	push	{r11, lr}
     eac:	e28db004 	add	r11, sp, #4
     eb0:	e24dd010 	sub	sp, sp, #16
     eb4:	e50b0010 	str	r0, [r11, #-16]
     eb8:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     ebc:	e3a03000 	mov	r3, #0
     ec0:	e50b3008 	str	r3, [r11, #-8]
     ec4:	ea00000a 	b	ef4 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     ec8:	e51b3008 	ldr	r3, [r11, #-8]
     ecc:	e1a03103 	lsl	r3, r3, #2
     ed0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     ed4:	e0823003 	add	r3, r2, r3
     ed8:	e5933000 	ldr	r3, [r3]
     edc:	e1a00003 	mov	r0, r3
     ee0:	e3a01001 	mov	r1, #1
     ee4:	ebffffc3 	bl	df8 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     ee8:	e51b3008 	ldr	r3, [r11, #-8]
     eec:	e2833001 	add	r3, r3, #1
     ef0:	e50b3008 	str	r3, [r11, #-8]
     ef4:	e51b2008 	ldr	r2, [r11, #-8]
     ef8:	e51b3010 	ldr	r3, [r11, #-16]
     efc:	e1520003 	cmp	r2, r3
     f00:	bafffff0 	blt	ec8 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     f04:	e30c3104 	movw	r3, #49412	; 0xc104
     f08:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     f0c:	e30f2fff 	movw	r2, #65535	; 0xffff
     f10:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     f14:	e3a03cc1 	mov	r3, #49408	; 0xc100
     f18:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     f1c:	e3a02001 	mov	r2, #1
     f20:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     f24:	e3a03a0d 	mov	r3, #53248	; 0xd000
     f28:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     f2c:	e3a02001 	mov	r2, #1
     f30:	e5832000 	str	r2, [r3]
}
     f34:	e24bd004 	sub	sp, r11, #4
     f38:	e8bd8800 	pop	{r11, pc}

00000f3c <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     f3c:	e24ee004 	sub	lr, lr, #4
     f40:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     f44:	e28db018 	add	r11, sp, #24
     f48:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     f4c:	e30c310c 	movw	r3, #49420	; 0xc10c
     f50:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     f54:	e5933000 	ldr	r3, [r3]
     f58:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     f5c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     f60:	e3530053 	cmp	r3, #83	; 0x53
     f64:	0a00003d 	beq	1060 <__cs3_isr_irq+0x124>
     f68:	e3530053 	cmp	r3, #83	; 0x53
     f6c:	ca000011 	bgt	fb8 <__cs3_isr_irq+0x7c>
     f70:	e353004e 	cmp	r3, #78	; 0x4e
     f74:	0a000031 	beq	1040 <__cs3_isr_irq+0x104>
     f78:	e353004e 	cmp	r3, #78	; 0x4e
     f7c:	ca000006 	bgt	f9c <__cs3_isr_irq+0x60>
     f80:	e3530048 	cmp	r3, #72	; 0x48
     f84:	0a000029 	beq	1030 <__cs3_isr_irq+0xf4>
     f88:	e3530049 	cmp	r3, #73	; 0x49
     f8c:	0a000029 	beq	1038 <__cs3_isr_irq+0xfc>
     f90:	e353001d 	cmp	r3, #29
     f94:	0a000019 	beq	1000 <__cs3_isr_irq+0xc4>
     f98:	ea000036 	b	1078 <__cs3_isr_irq+0x13c>
     f9c:	e3530050 	cmp	r3, #80	; 0x50
     fa0:	0a00002a 	beq	1050 <__cs3_isr_irq+0x114>
     fa4:	e3530050 	cmp	r3, #80	; 0x50
     fa8:	ba000026 	blt	1048 <__cs3_isr_irq+0x10c>
     fac:	e3530051 	cmp	r3, #81	; 0x51
     fb0:	0a000028 	beq	1058 <__cs3_isr_irq+0x11c>
     fb4:	ea00002f 	b	1078 <__cs3_isr_irq+0x13c>
     fb8:	e35300c7 	cmp	r3, #199	; 0xc7
     fbc:	0a000013 	beq	1010 <__cs3_isr_irq+0xd4>
     fc0:	e35300c7 	cmp	r3, #199	; 0xc7
     fc4:	ca000006 	bgt	fe4 <__cs3_isr_irq+0xa8>
     fc8:	e3530059 	cmp	r3, #89	; 0x59
     fcc:	0a000027 	beq	1070 <__cs3_isr_irq+0x134>
     fd0:	e35300c5 	cmp	r3, #197	; 0xc5
     fd4:	0a00000b 	beq	1008 <__cs3_isr_irq+0xcc>
     fd8:	e3530054 	cmp	r3, #84	; 0x54
     fdc:	0a000021 	beq	1068 <__cs3_isr_irq+0x12c>
     fe0:	ea000024 	b	1078 <__cs3_isr_irq+0x13c>
     fe4:	e35300c9 	cmp	r3, #201	; 0xc9
     fe8:	0a00000c 	beq	1020 <__cs3_isr_irq+0xe4>
     fec:	e35300c9 	cmp	r3, #201	; 0xc9
     ff0:	ba000008 	blt	1018 <__cs3_isr_irq+0xdc>
     ff4:	e35300ca 	cmp	r3, #202	; 0xca
     ff8:	0a00000a 	beq	1028 <__cs3_isr_irq+0xec>
     ffc:	ea00001d 	b	1078 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    1000:	ebfffe25 	bl	89c <A9_PRIV_TIM_ISR>
    1004:	ea00001c 	b	107c <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    1008:	ebfffe24 	bl	8a0 <HPS_GPIO1_ISR>
    100c:	ea00001a 	b	107c <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    1010:	ebfffe23 	bl	8a4 <HPS_TIM0_ISR>
    1014:	ea000018 	b	107c <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    1018:	ebfffe29 	bl	8c4 <HPS_TIM1_ISR>
    101c:	ea000016 	b	107c <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    1020:	ebfffe28 	bl	8c8 <HPS_TIM2_ISR>
    1024:	ea000014 	b	107c <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    1028:	ebfffe27 	bl	8cc <HPS_TIM3_ISR>
    102c:	ea000012 	b	107c <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    1030:	ebfffe26 	bl	8d0 <FPGA_INTERVAL_TIM_ISR>
    1034:	ea000010 	b	107c <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    1038:	ebfffe25 	bl	8d4 <FPGA_PB_KEYS_ISR>
    103c:	ea00000e 	b	107c <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    1040:	ebfffe3c 	bl	938 <FPGA_Audio_ISR>
    1044:	ea00000c 	b	107c <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    1048:	ebfffe3b 	bl	93c <FPGA_PS2_ISR>
    104c:	ea00000a 	b	107c <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    1050:	ebfffe3a 	bl	940 <FPGA_JTAG_ISR>
    1054:	ea000008 	b	107c <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    1058:	ebfffe39 	bl	944 <FPGA_IrDA_ISR>
    105c:	ea000006 	b	107c <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    1060:	ebfffe38 	bl	948 <FPGA_JP1_ISR>
    1064:	ea000004 	b	107c <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    1068:	ebfffe37 	bl	94c <FPGA_JP2_ISR>
    106c:	ea000002 	b	107c <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    1070:	ebfffe36 	bl	950 <FPGA_PS2_DUAL_ISR>
    1074:	ea000000 	b	107c <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    1078:	eafffffe 	b	1078 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    107c:	e30c3110 	movw	r3, #49424	; 0xc110
    1080:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1084:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    1088:	e5832000 	str	r2, [r3]
}
    108c:	e24bd018 	sub	sp, r11, #24
    1090:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00001094 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    1094:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1098:	e28db000 	add	r11, sp, #0
	while(1);
    109c:	eafffffe 	b	109c <__cs3_reset+0x8>

000010a0 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    10a0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    10a4:	e28db000 	add	r11, sp, #0
	while(1);
    10a8:	eafffffe 	b	10a8 <__cs3_isr_undef+0x8>

000010ac <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    10ac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    10b0:	e28db000 	add	r11, sp, #0
	while(1);
    10b4:	eafffffe 	b	10b4 <__cs3_isr_swi+0x8>

000010b8 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    10b8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    10bc:	e28db000 	add	r11, sp, #0
	while(1);
    10c0:	eafffffe 	b	10c0 <__cs3_isr_pabort+0x8>

000010c4 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    10c4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    10c8:	e28db000 	add	r11, sp, #0
	while(1);
    10cc:	eafffffe 	b	10cc <__cs3_isr_dabort+0x8>

000010d0 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    10d0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    10d4:	e28db000 	add	r11, sp, #0
	while(1);
    10d8:	eafffffe 	b	10d8 <__cs3_isr_fiq+0x8>

000010dc <fix_bug>:
}

void fix_bug() {
    10dc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    10e0:	e28db000 	add	r11, sp, #0
    10e4:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    10e8:	e30d3198 	movw	r3, #53656	; 0xd198
    10ec:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    10f0:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    10f4:	e51b3008 	ldr	r3, [r11, #-8]
    10f8:	e3a02703 	mov	r2, #786432	; 0xc0000
    10fc:	e5832000 	str	r2, [r3]
}
    1100:	e28bd000 	add	sp, r11, #0
    1104:	e8bd0800 	ldmfd	sp!, {r11}
    1108:	e12fff1e 	bx	lr

0000110c <int_setup>:

void int_setup(int len, int* IDs) {
    110c:	e92d4800 	push	{r11, lr}
    1110:	e28db004 	add	r11, sp, #4
    1114:	e24dd008 	sub	sp, sp, #8
    1118:	e50b0008 	str	r0, [r11, #-8]
    111c:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1120:	ebffff0e 	bl	d60 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    1124:	ebffff21 	bl	db0 <set_A9_IRQ_stack>
	fix_bug();
    1128:	ebffffeb 	bl	10dc <fix_bug>
	config_GIC(len, IDs);
    112c:	e51b0008 	ldr	r0, [r11, #-8]
    1130:	e51b100c 	ldr	r1, [r11, #-12]
    1134:	ebffff5b 	bl	ea8 <config_GIC>
	enable_A9_interrupts();
    1138:	ebffff12 	bl	d88 <enable_A9_interrupts>
}
    113c:	e24bd004 	sub	sp, r11, #4
    1140:	e8bd8800 	pop	{r11, pc}

00001144 <atexit>:
    1144:	e1a01000 	mov	r1, r0
    1148:	e3a00000 	mov	r0, #0
    114c:	e92d4008 	push	{r3, lr}
    1150:	e1a02000 	mov	r2, r0
    1154:	e1a03000 	mov	r3, r0
    1158:	eb00000e 	bl	1198 <__register_exitproc>
    115c:	e8bd4008 	pop	{r3, lr}
    1160:	e12fff1e 	bx	lr

00001164 <exit>:
    1164:	e92d4008 	push	{r3, lr}
    1168:	e3a01000 	mov	r1, #0
    116c:	e1a04000 	mov	r4, r0
    1170:	eb000045 	bl	128c <__call_exitprocs>
    1174:	e59f3018 	ldr	r3, [pc, #24]	; 1194 <exit+0x30>
    1178:	e5930000 	ldr	r0, [r3]
    117c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1180:	e3530000 	cmp	r3, #0
    1184:	11a0e00f 	movne	lr, pc
    1188:	112fff13 	bxne	r3
    118c:	e1a00004 	mov	r0, r4
    1190:	eb0000c9 	bl	14bc <_exit>
    1194:	0000156c 	.word	0x0000156c

00001198 <__register_exitproc>:
    1198:	e59fc0e4 	ldr	r12, [pc, #228]	; 1284 <__register_exitproc+0xec>
    119c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    11a0:	e59c4000 	ldr	r4, [r12]
    11a4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    11a8:	e35c0000 	cmp	r12, #0
    11ac:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    11b0:	e59c5004 	ldr	r5, [r12, #4]
    11b4:	0584c148 	streq	r12, [r4, #328]	; 0x148
    11b8:	e355001f 	cmp	r5, #31
    11bc:	e24dd010 	sub	sp, sp, #16
    11c0:	e1a06000 	mov	r6, r0
    11c4:	da000015 	ble	1220 <__register_exitproc+0x88>
    11c8:	e59f00b8 	ldr	r0, [pc, #184]	; 1288 <__register_exitproc+0xf0>
    11cc:	e3500000 	cmp	r0, #0
    11d0:	1a000001 	bne	11dc <__register_exitproc+0x44>
    11d4:	e3e00000 	mvn	r0, #0
    11d8:	ea000018 	b	1240 <__register_exitproc+0xa8>
    11dc:	e3a00e19 	mov	r0, #400	; 0x190
    11e0:	e58d100c 	str	r1, [sp, #12]
    11e4:	e58d2008 	str	r2, [sp, #8]
    11e8:	e58d3004 	str	r3, [sp, #4]
    11ec:	e320f000 	nop	{0}
    11f0:	e250c000 	subs	r12, r0, #0
    11f4:	e59d100c 	ldr	r1, [sp, #12]
    11f8:	e59d2008 	ldr	r2, [sp, #8]
    11fc:	e59d3004 	ldr	r3, [sp, #4]
    1200:	0afffff3 	beq	11d4 <__register_exitproc+0x3c>
    1204:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1208:	e3a00000 	mov	r0, #0
    120c:	e58c0004 	str	r0, [r12, #4]
    1210:	e58c5000 	str	r5, [r12]
    1214:	e584c148 	str	r12, [r4, #328]	; 0x148
    1218:	e58c0188 	str	r0, [r12, #392]	; 0x188
    121c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1220:	e3560000 	cmp	r6, #0
    1224:	e59c4004 	ldr	r4, [r12, #4]
    1228:	1a000007 	bne	124c <__register_exitproc+0xb4>
    122c:	e2843002 	add	r3, r4, #2
    1230:	e2844001 	add	r4, r4, #1
    1234:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1238:	e58c4004 	str	r4, [r12, #4]
    123c:	e3a00000 	mov	r0, #0
    1240:	e28dd010 	add	sp, sp, #16
    1244:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1248:	e12fff1e 	bx	lr
    124c:	e3a00001 	mov	r0, #1
    1250:	e1a00410 	lsl	r0, r0, r4
    1254:	e08c8104 	add	r8, r12, r4, lsl #2
    1258:	e3560002 	cmp	r6, #2
    125c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1260:	e5883108 	str	r3, [r8, #264]	; 0x108
    1264:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1268:	e1877000 	orr	r7, r7, r0
    126c:	01830000 	orreq	r0, r3, r0
    1270:	e1a05008 	mov	r5, r8
    1274:	e5882088 	str	r2, [r8, #136]	; 0x88
    1278:	e58c7188 	str	r7, [r12, #392]	; 0x188
    127c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1280:	eaffffe9 	b	122c <__register_exitproc+0x94>
    1284:	0000156c 	.word	0x0000156c
    1288:	00000000 	.word	0x00000000

0000128c <__call_exitprocs>:
    128c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1290:	e59f3168 	ldr	r3, [pc, #360]	; 1400 <__call_exitprocs+0x174>
    1294:	e5933000 	ldr	r3, [r3]
    1298:	e24dd014 	sub	sp, sp, #20
    129c:	e58d3004 	str	r3, [sp, #4]
    12a0:	e2833f52 	add	r3, r3, #328	; 0x148
    12a4:	e58d0008 	str	r0, [sp, #8]
    12a8:	e58d300c 	str	r3, [sp, #12]
    12ac:	e1a07001 	mov	r7, r1
    12b0:	e3a08001 	mov	r8, #1
    12b4:	e59d3004 	ldr	r3, [sp, #4]
    12b8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    12bc:	e3560000 	cmp	r6, #0
    12c0:	e59db00c 	ldr	r11, [sp, #12]
    12c4:	0a000033 	beq	1398 <__call_exitprocs+0x10c>
    12c8:	e5965004 	ldr	r5, [r6, #4]
    12cc:	e2554001 	subs	r4, r5, #1
    12d0:	5286a088 	addpl	r10, r6, #136	; 0x88
    12d4:	5285501f 	addpl	r5, r5, #31
    12d8:	508a5105 	addpl	r5, r10, r5, lsl #2
    12dc:	5a000007 	bpl	1300 <__call_exitprocs+0x74>
    12e0:	ea000029 	b	138c <__call_exitprocs+0x100>
    12e4:	e5953000 	ldr	r3, [r5]
    12e8:	e1530007 	cmp	r3, r7
    12ec:	0a000005 	beq	1308 <__call_exitprocs+0x7c>
    12f0:	e2444001 	sub	r4, r4, #1
    12f4:	e3740001 	cmn	r4, #1
    12f8:	e2455004 	sub	r5, r5, #4
    12fc:	0a000022 	beq	138c <__call_exitprocs+0x100>
    1300:	e3570000 	cmp	r7, #0
    1304:	1afffff6 	bne	12e4 <__call_exitprocs+0x58>
    1308:	e5963004 	ldr	r3, [r6, #4]
    130c:	e06a2005 	rsb	r2, r10, r5
    1310:	e2433001 	sub	r3, r3, #1
    1314:	e0862002 	add	r2, r6, r2
    1318:	e1530004 	cmp	r3, r4
    131c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1320:	13a01000 	movne	r1, #0
    1324:	05864004 	streq	r4, [r6, #4]
    1328:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    132c:	e3530000 	cmp	r3, #0
    1330:	0affffee 	beq	12f0 <__call_exitprocs+0x64>
    1334:	e1a02418 	lsl	r2, r8, r4
    1338:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    133c:	e1120001 	tst	r2, r1
    1340:	e5969004 	ldr	r9, [r6, #4]
    1344:	0a000016 	beq	13a4 <__call_exitprocs+0x118>
    1348:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    134c:	e1120001 	tst	r2, r1
    1350:	1a000016 	bne	13b0 <__call_exitprocs+0x124>
    1354:	e59d0008 	ldr	r0, [sp, #8]
    1358:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    135c:	e1a0e00f 	mov	lr, pc
    1360:	e12fff13 	bx	r3
    1364:	e5963004 	ldr	r3, [r6, #4]
    1368:	e1530009 	cmp	r3, r9
    136c:	1affffd0 	bne	12b4 <__call_exitprocs+0x28>
    1370:	e59b3000 	ldr	r3, [r11]
    1374:	e1530006 	cmp	r3, r6
    1378:	1affffcd 	bne	12b4 <__call_exitprocs+0x28>
    137c:	e2444001 	sub	r4, r4, #1
    1380:	e3740001 	cmn	r4, #1
    1384:	e2455004 	sub	r5, r5, #4
    1388:	1affffdc 	bne	1300 <__call_exitprocs+0x74>
    138c:	e59f1070 	ldr	r1, [pc, #112]	; 1404 <__call_exitprocs+0x178>
    1390:	e3510000 	cmp	r1, #0
    1394:	1a000009 	bne	13c0 <__call_exitprocs+0x134>
    1398:	e28dd014 	add	sp, sp, #20
    139c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    13a0:	e12fff1e 	bx	lr
    13a4:	e1a0e00f 	mov	lr, pc
    13a8:	e12fff13 	bx	r3
    13ac:	eaffffec 	b	1364 <__call_exitprocs+0xd8>
    13b0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    13b4:	e1a0e00f 	mov	lr, pc
    13b8:	e12fff13 	bx	r3
    13bc:	eaffffe8 	b	1364 <__call_exitprocs+0xd8>
    13c0:	e5963004 	ldr	r3, [r6, #4]
    13c4:	e3530000 	cmp	r3, #0
    13c8:	e5963000 	ldr	r3, [r6]
    13cc:	1a000008 	bne	13f4 <__call_exitprocs+0x168>
    13d0:	e3530000 	cmp	r3, #0
    13d4:	0a000006 	beq	13f4 <__call_exitprocs+0x168>
    13d8:	e1a00006 	mov	r0, r6
    13dc:	e58b3000 	str	r3, [r11]
    13e0:	e320f000 	nop	{0}
    13e4:	e59b6000 	ldr	r6, [r11]
    13e8:	e3560000 	cmp	r6, #0
    13ec:	1affffb5 	bne	12c8 <__call_exitprocs+0x3c>
    13f0:	eaffffe8 	b	1398 <__call_exitprocs+0x10c>
    13f4:	e1a0b006 	mov	r11, r6
    13f8:	e1a06003 	mov	r6, r3
    13fc:	eafffff9 	b	13e8 <__call_exitprocs+0x15c>
    1400:	0000156c 	.word	0x0000156c
    1404:	00000000 	.word	0x00000000

00001408 <register_fini>:
    1408:	e92d4008 	push	{r3, lr}
    140c:	e59f3010 	ldr	r3, [pc, #16]	; 1424 <register_fini+0x1c>
    1410:	e3530000 	cmp	r3, #0
    1414:	159f000c 	ldrne	r0, [pc, #12]	; 1428 <register_fini+0x20>
    1418:	1bffff49 	blne	1144 <atexit>
    141c:	e8bd4008 	pop	{r3, lr}
    1420:	e12fff1e 	bx	lr
    1424:	00001594 	.word	0x00001594
    1428:	0000142c 	.word	0x0000142c

0000142c <__libc_fini_array>:
    142c:	e92d4038 	push	{r3, r4, r5, lr}
    1430:	e59f5030 	ldr	r5, [pc, #48]	; 1468 <__libc_fini_array+0x3c>
    1434:	e59f4030 	ldr	r4, [pc, #48]	; 146c <__libc_fini_array+0x40>
    1438:	e0654004 	rsb	r4, r5, r4
    143c:	e1b04144 	asrs	r4, r4, #2
    1440:	10855104 	addne	r5, r5, r4, lsl #2
    1444:	0a000004 	beq	145c <__libc_fini_array+0x30>
    1448:	e5353004 	ldr	r3, [r5, #-4]!
    144c:	e1a0e00f 	mov	lr, pc
    1450:	e12fff13 	bx	r3
    1454:	e2544001 	subs	r4, r4, #1
    1458:	1afffffa 	bne	1448 <__libc_fini_array+0x1c>
    145c:	eb00004c 	bl	1594 <__libc_fini>
    1460:	e8bd4038 	pop	{r3, r4, r5, lr}
    1464:	e12fff1e 	bx	lr
    1468:	000015ac 	.word	0x000015ac
    146c:	000015b0 	.word	0x000015b0

00001470 <__cs3_premain>:
    1470:	e92d4008 	push	{r3, lr}
    1474:	eb000017 	bl	14d8 <__libc_init_array>
    1478:	e59f3030 	ldr	r3, [pc, #48]	; 14b0 <__cs3_premain+0x40>
    147c:	e3530000 	cmp	r3, #0
    1480:	15930000 	ldrne	r0, [r3]
    1484:	01a00003 	moveq	r0, r3
    1488:	e59f3024 	ldr	r3, [pc, #36]	; 14b4 <__cs3_premain+0x44>
    148c:	e3530000 	cmp	r3, #0
    1490:	15931000 	ldrne	r1, [r3]
    1494:	01a01003 	moveq	r1, r3
    1498:	e3a02000 	mov	r2, #0
    149c:	ebfffd5b 	bl	a10 <main>
    14a0:	e59f3010 	ldr	r3, [pc, #16]	; 14b8 <__cs3_premain+0x48>
    14a4:	e3530000 	cmp	r3, #0
    14a8:	1bffff2d 	blne	1164 <exit>
    14ac:	eafffffe 	b	14ac <__cs3_premain+0x3c>
	...
    14b8:	00001164 	.word	0x00001164

000014bc <_exit>:
    14bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    14c0:	e3a00018 	mov	r0, #24
    14c4:	e59f1004 	ldr	r1, [pc, #4]	; 14d0 <_exit+0x14>
    14c8:	ef123456 	svc	0x00123456
    14cc:	eafffffe 	b	14cc <_exit+0x10>
    14d0:	00020026 	.word	0x00020026

000014d4 <__cs3_isr_interrupt>:
    14d4:	eafffffe 	b	14d4 <__cs3_isr_interrupt>

000014d8 <__libc_init_array>:
    14d8:	e92d4070 	push	{r4, r5, r6, lr}
    14dc:	e59f506c 	ldr	r5, [pc, #108]	; 1550 <__libc_init_array+0x78>
    14e0:	e59f606c 	ldr	r6, [pc, #108]	; 1554 <__libc_init_array+0x7c>
    14e4:	e0656006 	rsb	r6, r5, r6
    14e8:	e1b06146 	asrs	r6, r6, #2
    14ec:	12455004 	subne	r5, r5, #4
    14f0:	13a04000 	movne	r4, #0
    14f4:	0a000005 	beq	1510 <__libc_init_array+0x38>
    14f8:	e5b53004 	ldr	r3, [r5, #4]!
    14fc:	e2844001 	add	r4, r4, #1
    1500:	e1a0e00f 	mov	lr, pc
    1504:	e12fff13 	bx	r3
    1508:	e1560004 	cmp	r6, r4
    150c:	1afffff9 	bne	14f8 <__libc_init_array+0x20>
    1510:	e59f5040 	ldr	r5, [pc, #64]	; 1558 <__libc_init_array+0x80>
    1514:	e59f6040 	ldr	r6, [pc, #64]	; 155c <__libc_init_array+0x84>
    1518:	e0656006 	rsb	r6, r5, r6
    151c:	eb000014 	bl	1574 <_init>
    1520:	e1b06146 	asrs	r6, r6, #2
    1524:	12455004 	subne	r5, r5, #4
    1528:	13a04000 	movne	r4, #0
    152c:	0a000005 	beq	1548 <__libc_init_array+0x70>
    1530:	e5b53004 	ldr	r3, [r5, #4]!
    1534:	e2844001 	add	r4, r4, #1
    1538:	e1a0e00f 	mov	lr, pc
    153c:	e12fff13 	bx	r3
    1540:	e1560004 	cmp	r6, r4
    1544:	1afffff9 	bne	1530 <__libc_init_array+0x58>
    1548:	e8bd4070 	pop	{r4, r5, r6, lr}
    154c:	e12fff1e 	bx	lr
    1550:	0000158c 	.word	0x0000158c
    1554:	0000158c 	.word	0x0000158c
    1558:	0000158c 	.word	0x0000158c
    155c:	00001594 	.word	0x00001594

Disassembly of section .rodata:

00001564 <_global_impure_ptr-0x8>:
    1564:	00000049 	.word	0x00000049
    1568:	000000c7 	.word	0x000000c7

0000156c <_global_impure_ptr>:
    156c:	000015d8 00000043                       ....C...

00001574 <_init>:
    1574:	e1a0c00d 	mov	r12, sp
    1578:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    157c:	e24cb004 	sub	r11, r12, #4
    1580:	e24bd028 	sub	sp, r11, #40	; 0x28
    1584:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1588:	e12fff1e 	bx	lr

0000158c <__init_array_start>:
    158c:	00001408 	.word	0x00001408

00001590 <__frame_dummy_init_array_entry>:
    1590:	00000208                                ....

00001594 <__libc_fini>:
    1594:	e1a0c00d 	mov	r12, sp
    1598:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    159c:	e24cb004 	sub	r11, r12, #4
    15a0:	e24bd028 	sub	sp, r11, #40	; 0x28
    15a4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    15a8:	e12fff1e 	bx	lr

000015ac <__fini_array_start>:
    15ac:	000001c4 	.word	0x000001c4

000015b0 <__cs3_regions>:
    15b0:	00000000 	.word	0x00000000
    15b4:	00000040 	.word	0x00000040
    15b8:	00000040 	.word	0x00000040
    15bc:	000019c8 	.word	0x000019c8
    15c0:	00000020 	.word	0x00000020

000015c4 <__cs3_regions_end>:
    15c4:	00000000 	.word	0x00000000
