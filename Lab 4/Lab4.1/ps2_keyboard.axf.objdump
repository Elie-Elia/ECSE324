
//campus.mcgill.ca/emf/SWE/mbrode19/Desktop/Labs/fixing lab 1/ps2_keyboard.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 f8 09 00 00 fc 09 00 00 00 0a 00 00     @...............
  30:	04 0a 00 00 f4 09 00 00 08 0a 00 00 0c 0a 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00022d 	bl	990 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000af4 	.word	0x00000af4

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000f30 	.word	0x00000f30

00000124 <__cs3_heap_start_ptr>:
 124:	00000f58 	.word	0x00000f58

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000f38 	.word	0x00000f38
 170:	00000f3b 	.word	0x00000f3b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000f38 	.word	0x00000f38
 1bc:	00000f38 	.word	0x00000f38
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000f38 	.word	0x00000f38
 200:	00000000 	.word	0x00000000
 204:	00000a98 	.word	0x00000a98

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000a98 	.word	0x00000a98
 250:	00000f3c 	.word	0x00000f3c
 254:	00000af8 	.word	0x00000af8
 258:	00000000 	.word	0x00000000

0000025c <read_PS2_data_ASM>:
				.text
				.global read_PS2_data_ASM
				.equ PS2_DATA, 0xFF200100

read_PS2_data_ASM:
				LDR R3, =PS2_DATA
 25c:	e59f301c 	ldr	r3, [pc, #28]	; 280 <STORE_ARG+0xc>
				LDR R3, [R3]
 260:	e5933000 	ldr	r3, [r3]
				//TST R3, #65536
				TST R3, #32768 //so to test against the 15th bit of the register
 264:	e3130902 	tst	r3, #32768	; 0x8000
				//LSR R4, R3, #16
				//TST R4, #1
				BNE STORE_ARG	//if indeed 1, store byte char from user
 268:	1a000001 	bne	274 <STORE_ARG>
				MOV R0, #0
 26c:	e3a00000 	mov	r0, #0
				BX LR
 270:	e12fff1e 	bx	lr

00000274 <STORE_ARG>:
STORE_ARG:		STRB R3, [R0]	
 274:	e5c03000 	strb	r3, [r0]
				MOV R0, #1
 278:	e3a00001 	mov	r0, #1
				BX LR		
 27c:	e12fff1e 	bx	lr
				.text
				.global read_PS2_data_ASM
				.equ PS2_DATA, 0xFF200100

read_PS2_data_ASM:
				LDR R3, =PS2_DATA
 280:	ff200100 	.word	0xff200100

00000284 <read_slider_switches_ASM>:
							.text
							.equ SW_BASE, 0xFF200040
							.global read_slider_switches_ASM

read_slider_switches_ASM:	
							LDR R2, =SW_BASE
 284:	e59f2004 	ldr	r2, [pc, #4]	; 290 <read_slider_switches_ASM+0xc>
							LDR R0, [R2]
 288:	e5920000 	ldr	r0, [r2]
							BX LR
 28c:	e12fff1e 	bx	lr
							.text
							.equ SW_BASE, 0xFF200040
							.global read_slider_switches_ASM

read_slider_switches_ASM:	
							LDR R2, =SW_BASE
 290:	ff200040 	.word	0xff200040

00000294 <VGA_clear_pixelbuff_ASM>:
	.global VGA_write_char_ASM
	.global VGA_write_byte_ASM
	.global VGA_draw_point_ASM
		
VGA_clear_pixelbuff_ASM:
	push {r4-r5}	
 294:	e92d0030 	push	{r4, r5}
	mov r2,#0
 298:	e3a02000 	mov	r2, #0
	ldr r3,=VGA_PIXEL_BUF_BASE
 29c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	mov r0,#0
 2a0:	e3a00000 	mov	r0, #0

000002a4 <PIXEL_LOOPX>:
PIXEL_LOOPX:
	mov r1,#0
 2a4:	e3a01000 	mov	r1, #0
	add r4,r3,r0,lsl #1
 2a8:	e0834080 	add	r4, r3, r0, lsl #1

000002ac <PIXEL_LOOPY>:
PIXEL_LOOPY:
	add r5,r4,r1,lsl #10
 2ac:	e0845501 	add	r5, r4, r1, lsl #10
	strh r2,[r5]
 2b0:	e1c520b0 	strh	r2, [r5]
	add r1,r1,#1
 2b4:	e2811001 	add	r1, r1, #1
	cmp r1,#240
 2b8:	e35100f0 	cmp	r1, #240	; 0xf0
	blt PIXEL_LOOPY
 2bc:	bafffffa 	blt	2ac <PIXEL_LOOPY>
	add r0,r0,#1
 2c0:	e2800001 	add	r0, r0, #1
	cmp r0,#320
 2c4:	e3500d05 	cmp	r0, #320	; 0x140
	blt PIXEL_LOOPX
 2c8:	bafffff5 	blt	2a4 <PIXEL_LOOPX>
	pop {r4-r5}
 2cc:	e8bd0030 	pop	{r4, r5}
	bx lr
 2d0:	e12fff1e 	bx	lr

000002d4 <VGA_draw_point_ASM>:
VGA_draw_point_ASM:
	ldr r3,=319
 2d4:	e59f30c4 	ldr	r3, [pc, #196]	; 3a0 <HEX_ASCII+0x10>
	ldr r3,=VGA_PIXEL_BUF_BASE
 2d8:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	add r3,r3,r0,lsl #1
 2dc:	e0833080 	add	r3, r3, r0, lsl #1
	add r3,r3,r1,lsl #10
 2e0:	e0833501 	add	r3, r3, r1, lsl #10
	strh r2,[r3]
 2e4:	e1c320b0 	strh	r2, [r3]
	bx lr
 2e8:	e12fff1e 	bx	lr

000002ec <VGA_clear_charbuff_ASM>:
VGA_clear_charbuff_ASM:
	push {r4-r5}	
 2ec:	e92d0030 	push	{r4, r5}
	mov r2,#0
 2f0:	e3a02000 	mov	r2, #0
	ldr r3,=VGA_CHAR_BUF_BASE
 2f4:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	mov r0,#0
 2f8:	e3a00000 	mov	r0, #0

000002fc <CHAR_LOOPX>:
CHAR_LOOPX:
	mov r1,#0
 2fc:	e3a01000 	mov	r1, #0
	add r4,r3,r0,lsl #1
 300:	e0834080 	add	r4, r3, r0, lsl #1

00000304 <CHAR_LOOPY>:
CHAR_LOOPY:
	add r5,r4,r1,lsl #7
 304:	e0845381 	add	r5, r4, r1, lsl #7
	strh r2,[r5]
 308:	e1c520b0 	strh	r2, [r5]
	add r1,r1,#1
 30c:	e2811001 	add	r1, r1, #1
	cmp r1,#60
 310:	e351003c 	cmp	r1, #60	; 0x3c
	blt CHAR_LOOPY
 314:	bafffffa 	blt	304 <CHAR_LOOPY>
	add r0,r0,#1
 318:	e2800001 	add	r0, r0, #1
	cmp r0,#80
 31c:	e3500050 	cmp	r0, #80	; 0x50
	blt CHAR_LOOPX
 320:	bafffff5 	blt	2fc <CHAR_LOOPX>
	pop {r4-r5}
 324:	e8bd0030 	pop	{r4, r5}
	bx lr
 328:	e12fff1e 	bx	lr

0000032c <VGA_write_char_ASM>:
VGA_write_char_ASM:
	ldr r3,=VGA_CHAR_BUF_BASE
 32c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	add r3,r3,r0
 330:	e0833000 	add	r3, r3, r0
	add r3,r3,r1,lsl #7
 334:	e0833381 	add	r3, r3, r1, lsl #7
	strb r2,[r3]
 338:	e5c32000 	strb	r2, [r3]
	bx lr
 33c:	e12fff1e 	bx	lr

00000340 <VGA_write_byte_ASM>:
VGA_write_byte_ASM:
	ldr r3,=79
 340:	e3a0304f 	mov	r3, #79	; 0x4f
	mov r5,#0
 344:	e3a05000 	mov	r5, #0
	mov r6,#0
 348:	e3a06000 	mov	r6, #0
	mov r7,#0
 34c:	e3a07000 	mov	r7, #0
	push {r5-r7}
 350:	e92d00e0 	push	{r5, r6, r7}
	ldr r3,=VGA_CHAR_BUF_BASE
 354:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	add r3,r3,r0
 358:	e0833000 	add	r3, r3, r0
	add r3,r3,r1,lsl #7
 35c:	e0833381 	add	r3, r3, r1, lsl #7
	and r5,r2,#0xf0
 360:	e20250f0 	and	r5, r2, #240	; 0xf0
	and r6,r2,#0x0f
 364:	e202600f 	and	r6, r2, #15
	lsr r5,r5,#4
 368:	e1a05225 	lsr	r5, r5, #4
	ldr r4,=HEX_ASCII
 36c:	e59f4030 	ldr	r4, [pc, #48]	; 3a4 <HEX_ASCII+0x14>
	add r7,r4,r6
 370:	e0847006 	add	r7, r4, r6
	add r4,r4,r5
 374:	e0844005 	add	r4, r4, r5
	ldrb r4,[r4]
 378:	e5d44000 	ldrb	r4, [r4]
	strb r4,[r3]
 37c:	e5c34000 	strb	r4, [r3]
	ldrb r7,[r7]
 380:	e5d77000 	ldrb	r7, [r7]
	strb r7,[r3,#1] 
 384:	e5c37001 	strb	r7, [r3, #1]
	pop {r5-r7}
 388:	e8bd00e0 	pop	{r5, r6, r7}
	bx lr
 38c:	e12fff1e 	bx	lr

00000390 <HEX_ASCII>:
 390:	33323130 	.word	0x33323130
 394:	37363534 	.word	0x37363534
 398:	42413938 	.word	0x42413938
 39c:	46454443 	.word	0x46454443
	cmp r0,#320
	blt PIXEL_LOOPX
	pop {r4-r5}
	bx lr
VGA_draw_point_ASM:
	ldr r3,=319
 3a0:	0000013f 	.word	0x0000013f
	add r3,r3,r0
	add r3,r3,r1,lsl #7
	and r5,r2,#0xf0
	and r6,r2,#0x0f
	lsr r5,r5,#4
	ldr r4,=HEX_ASCII
 3a4:	00000390 	.word	0x00000390

000003a8 <test_char>:
#include "./drivers/inc/ps2_keyboard.h"
#include "./drivers/inc/vga.h"



void test_char(){
 3a8:	e92d4800 	push	{r11, lr}
 3ac:	e28db004 	add	r11, sp, #4
 3b0:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c = 70;
 3b4:	e3a03046 	mov	r3, #70	; 0x46
 3b8:	e54b300d 	strb	r3, [r11, #-13]
	
	for(y=0;y<=59;y++){
 3bc:	e3a03000 	mov	r3, #0
 3c0:	e50b300c 	str	r3, [r11, #-12]
 3c4:	ea000013 	b	418 <test_char+0x70>
		for(x=0;x<=79;x++){
 3c8:	e3a03000 	mov	r3, #0
 3cc:	e50b3008 	str	r3, [r11, #-8]
 3d0:	ea00000a 	b	400 <test_char+0x58>
			VGA_write_char_ASM(x,y,c++);
 3d4:	e55b300d 	ldrb	r3, [r11, #-13]
 3d8:	e55b200d 	ldrb	r2, [r11, #-13]
 3dc:	e2822001 	add	r2, r2, #1
 3e0:	e54b200d 	strb	r2, [r11, #-13]
 3e4:	e51b0008 	ldr	r0, [r11, #-8]
 3e8:	e51b100c 	ldr	r1, [r11, #-12]
 3ec:	e1a02003 	mov	r2, r3
 3f0:	ebffffcd 	bl	32c <VGA_write_char_ASM>
void test_char(){
	int x,y;
	char c = 70;
	
	for(y=0;y<=59;y++){
		for(x=0;x<=79;x++){
 3f4:	e51b3008 	ldr	r3, [r11, #-8]
 3f8:	e2833001 	add	r3, r3, #1
 3fc:	e50b3008 	str	r3, [r11, #-8]
 400:	e51b3008 	ldr	r3, [r11, #-8]
 404:	e353004f 	cmp	r3, #79	; 0x4f
 408:	dafffff1 	ble	3d4 <test_char+0x2c>

void test_char(){
	int x,y;
	char c = 70;
	
	for(y=0;y<=59;y++){
 40c:	e51b300c 	ldr	r3, [r11, #-12]
 410:	e2833001 	add	r3, r3, #1
 414:	e50b300c 	str	r3, [r11, #-12]
 418:	e51b300c 	ldr	r3, [r11, #-12]
 41c:	e353003b 	cmp	r3, #59	; 0x3b
 420:	daffffe8 	ble	3c8 <test_char+0x20>
		for(x=0;x<=79;x++){
			VGA_write_char_ASM(x,y,c++);
		}
	}
}
 424:	e24bd004 	sub	sp, r11, #4
 428:	e8bd8800 	pop	{r11, pc}

0000042c <test_byte>:

void test_byte(){
 42c:	e92d4800 	push	{r11, lr}
 430:	e28db004 	add	r11, sp, #4
 434:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c =0;
 438:	e3a03000 	mov	r3, #0
 43c:	e54b300d 	strb	r3, [r11, #-13]
	for(y=0;y<=59;y++){
 440:	e3a03000 	mov	r3, #0
 444:	e50b300c 	str	r3, [r11, #-12]
 448:	ea000013 	b	49c <test_byte+0x70>
		for(x=0;x<=79;x+=3){
 44c:	e3a03000 	mov	r3, #0
 450:	e50b3008 	str	r3, [r11, #-8]
 454:	ea00000a 	b	484 <test_byte+0x58>
			VGA_write_byte_ASM(x,y,c++);
 458:	e55b300d 	ldrb	r3, [r11, #-13]
 45c:	e55b200d 	ldrb	r2, [r11, #-13]
 460:	e2822001 	add	r2, r2, #1
 464:	e54b200d 	strb	r2, [r11, #-13]
 468:	e51b0008 	ldr	r0, [r11, #-8]
 46c:	e51b100c 	ldr	r1, [r11, #-12]
 470:	e1a02003 	mov	r2, r3
 474:	ebffffb1 	bl	340 <VGA_write_byte_ASM>

void test_byte(){
	int x,y;
	char c =0;
	for(y=0;y<=59;y++){
		for(x=0;x<=79;x+=3){
 478:	e51b3008 	ldr	r3, [r11, #-8]
 47c:	e2833003 	add	r3, r3, #3
 480:	e50b3008 	str	r3, [r11, #-8]
 484:	e51b3008 	ldr	r3, [r11, #-8]
 488:	e353004f 	cmp	r3, #79	; 0x4f
 48c:	dafffff1 	ble	458 <test_byte+0x2c>
}

void test_byte(){
	int x,y;
	char c =0;
	for(y=0;y<=59;y++){
 490:	e51b300c 	ldr	r3, [r11, #-12]
 494:	e2833001 	add	r3, r3, #1
 498:	e50b300c 	str	r3, [r11, #-12]
 49c:	e51b300c 	ldr	r3, [r11, #-12]
 4a0:	e353003b 	cmp	r3, #59	; 0x3b
 4a4:	daffffe8 	ble	44c <test_byte+0x20>
		for(x=0;x<=79;x+=3){
			VGA_write_byte_ASM(x,y,c++);
		}
	}
}
 4a8:	e24bd004 	sub	sp, r11, #4
 4ac:	e8bd8800 	pop	{r11, pc}

000004b0 <test_pixel>:

void test_pixel(){
 4b0:	e92d4800 	push	{r11, lr}
 4b4:	e28db004 	add	r11, sp, #4
 4b8:	e24dd010 	sub	sp, sp, #16
	int x,y;
	unsigned short colour = 0;
 4bc:	e3a03000 	mov	r3, #0
 4c0:	e14b30be 	strh	r3, [r11, #-14]
	
	for(y=0;y<=239;y++)
 4c4:	e3a03000 	mov	r3, #0
 4c8:	e50b300c 	str	r3, [r11, #-12]
 4cc:	ea000015 	b	528 <test_pixel+0x78>
		for(x=0;x<=319;x++)
 4d0:	e3a03000 	mov	r3, #0
 4d4:	e50b3008 	str	r3, [r11, #-8]
 4d8:	ea00000b 	b	50c <test_pixel+0x5c>
			VGA_draw_point_ASM(x,y,colour++);
 4dc:	e15b30be 	ldrh	r3, [r11, #-14]
 4e0:	e15b20be 	ldrh	r2, [r11, #-14]
 4e4:	e2822001 	add	r2, r2, #1
 4e8:	e14b20be 	strh	r2, [r11, #-14]
 4ec:	e6bf3073 	sxth	r3, r3
 4f0:	e51b0008 	ldr	r0, [r11, #-8]
 4f4:	e51b100c 	ldr	r1, [r11, #-12]
 4f8:	e1a02003 	mov	r2, r3
 4fc:	ebffff74 	bl	2d4 <VGA_draw_point_ASM>
void test_pixel(){
	int x,y;
	unsigned short colour = 0;
	
	for(y=0;y<=239;y++)
		for(x=0;x<=319;x++)
 500:	e51b3008 	ldr	r3, [r11, #-8]
 504:	e2833001 	add	r3, r3, #1
 508:	e50b3008 	str	r3, [r11, #-8]
 50c:	e51b2008 	ldr	r2, [r11, #-8]
 510:	e300313f 	movw	r3, #319	; 0x13f
 514:	e1520003 	cmp	r2, r3
 518:	daffffef 	ble	4dc <test_pixel+0x2c>

void test_pixel(){
	int x,y;
	unsigned short colour = 0;
	
	for(y=0;y<=239;y++)
 51c:	e51b300c 	ldr	r3, [r11, #-12]
 520:	e2833001 	add	r3, r3, #1
 524:	e50b300c 	str	r3, [r11, #-12]
 528:	e51b300c 	ldr	r3, [r11, #-12]
 52c:	e35300ef 	cmp	r3, #239	; 0xef
 530:	daffffe6 	ble	4d0 <test_pixel+0x20>
		for(x=0;x<=319;x++)
			VGA_draw_point_ASM(x,y,colour++);
}
 534:	e24bd004 	sub	sp, r11, #4
 538:	e8bd8800 	pop	{r11, pc}

0000053c <main>:

 int main() {
 53c:	e92d4800 	push	{r11, lr}
 540:	e28db004 	add	r11, sp, #4
 544:	ea000000 	b	54c <main+0x10>
			VGA_clear_charbuff_ASM(); //CHARACTER BUFFER IS CLEARED
		
		//CHECK IF THE BUTTON PB1 IS PRESSED
		if(PB_data_is_pressed_ASM(PB1))
			test_pixel(); //CHANGE THE COLORS OF THE PIXELS WITH TEST PIXELS
	}
 548:	e1a00000 	nop			; (mov r0, r0)

 int main() {

	while(1) {
		//CHECK IF THE BUTTON PB0 IS PRESSED									
		if(PB_data_is_pressed_ASM(PB0)){
 54c:	e3a00001 	mov	r0, #1
 550:	eb000022 	bl	5e0 <PB_data_is_pressed_ASM>
 554:	e1a03000 	mov	r3, r0
 558:	e3530000 	cmp	r3, #0
 55c:	0a000006 	beq	57c <main+0x40>
			if (read_slider_switches_ASM() != 0) {
 560:	ebffff47 	bl	284 <read_slider_switches_ASM>
 564:	e1a03000 	mov	r3, r0
 568:	e3530000 	cmp	r3, #0
 56c:	0a000001 	beq	578 <main+0x3c>
				//IF ANY SLIDER IS UP WE RUN TEST BYTE
				//TEST BYTE RUNS VGA_WRITE AND CHANGES THE HEX VALUES
				test_byte(); 
 570:	ebffffad 	bl	42c <test_byte>
 574:	ea000000 	b	57c <main+0x40>
			}else
					test_char();
 578:	ebffff8a 	bl	3a8 <test_char>
				//IF  NO SLIDERS ARE UP  THEN RUN TEST CHAR
		//CHECK IF THE BUTTON PB3 IS PRESSED
	}
		if(PB_data_is_pressed_ASM(PB3))
 57c:	e3a00008 	mov	r0, #8
 580:	eb000016 	bl	5e0 <PB_data_is_pressed_ASM>
 584:	e1a03000 	mov	r3, r0
 588:	e3530000 	cmp	r3, #0
 58c:	0a000000 	beq	594 <main+0x58>
			VGA_clear_pixelbuff_ASM();  // PIXEL BUFFER IS CLEARED
 590:	ebffff3f 	bl	294 <VGA_clear_pixelbuff_ASM>
		
			
		//CHECK IF THE BUTTON PB2 IS PRESSED
		if(PB_data_is_pressed_ASM(PB2))
 594:	e3a00004 	mov	r0, #4
 598:	eb000010 	bl	5e0 <PB_data_is_pressed_ASM>
 59c:	e1a03000 	mov	r3, r0
 5a0:	e3530000 	cmp	r3, #0
 5a4:	0a000000 	beq	5ac <main+0x70>
			VGA_clear_charbuff_ASM(); //CHARACTER BUFFER IS CLEARED
 5a8:	ebffff4f 	bl	2ec <VGA_clear_charbuff_ASM>
		
		//CHECK IF THE BUTTON PB1 IS PRESSED
		if(PB_data_is_pressed_ASM(PB1))
 5ac:	e3a00002 	mov	r0, #2
 5b0:	eb00000a 	bl	5e0 <PB_data_is_pressed_ASM>
 5b4:	e1a03000 	mov	r3, r0
 5b8:	e3530000 	cmp	r3, #0
 5bc:	0affffe1 	beq	548 <main+0xc>
			test_pixel(); //CHANGE THE COLORS OF THE PIXELS WITH TEST PIXELS
 5c0:	ebffffba 	bl	4b0 <test_pixel>
	}
 5c4:	eaffffdf 	b	548 <main+0xc>

000005c8 <read_PB_data_ASM>:
			.equ PB_BASE, 0xFF200050
			.equ PB_EDGECAPTURE, 0xFF20005C
			.global read_PB_data_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecp_ASM, enable_PB_INT_ASM, PB_data_is_pressed_ASM

read_PB_data_ASM:
			LDR R1, =PB_BASE			//load the address of PB_BASE
 5c8:	e59f1088 	ldr	r1, [pc, #136]	; 658 <disable_PB_INT_ASM+0x14>
			LDR R0, [R1]				//load the data stored inside PB_BASE
 5cc:	e5910000 	ldr	r0, [r1]
			BX LR
 5d0:	e12fff1e 	bx	lr

000005d4 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
			LDR R2, =PB_EDGECAPTURE		//load the address of PB_EDGECAPTURE
 5d4:	e59f2080 	ldr	r2, [pc, #128]	; 65c <disable_PB_INT_ASM+0x18>
			LDR R0, [R2]				//load the data stored inside PB_EDGECAPTURE
 5d8:	e5920000 	ldr	r0, [r2]
			BX LR
 5dc:	e12fff1e 	bx	lr

000005e0 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
			PUSH {LR}
 5e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
			LDR R1, =PB_BASE // R1 contains base address of pushbutton parallel port
 5e4:	e59f106c 	ldr	r1, [pc, #108]	; 658 <disable_PB_INT_ASM+0x14>
			LDR R2, [R1] // R2 contains buttons within pushbutton parallel port that are on
 5e8:	e5912000 	ldr	r2, [r1]
			AND R3, R2, R0 // R0 contains whose pressed status you wish to check
 5ec:	e0023000 	and	r3, r2, r0
			CMP R3, R0
 5f0:	e1530000 	cmp	r3, r0
			MOVGE R0, #1 // return true if button is pressed
 5f4:	a3a00001 	movge	r0, #1
			MOVLT R0, #0 // return false if button is not pressed
 5f8:	b3a00000 	movlt	r0, #0
			POP {LR}
 5fc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
			BX LR
 600:	e12fff1e 	bx	lr

00000604 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
			LDR R3, =PB_EDGECAPTURE		//load the address of PB_EDGECAPTURE
 604:	e59f3050 	ldr	r3, [pc, #80]	; 65c <disable_PB_INT_ASM+0x18>
			LDR R3, [R3]				//load the data stored inside PB_EDGECAPTURE
 608:	e5933000 	ldr	r3, [r3]
			TST R0, R3					//compare with the input button
 60c:	e1100003 	tst	r0, r3
			BNE STORE_1					//if it equals the input button, output 1(true)
 610:	1a000000 	bne	618 <STORE_1>
			BEQ STORE_0					//if not, output 0 (false)
 614:	0a000001 	beq	620 <STORE_0>

00000618 <STORE_1>:

STORE_1:	MOV R0, #1
 618:	e3a00001 	mov	r0, #1
			B DONE
 61c:	ea000000 	b	624 <DONE>

00000620 <STORE_0>:
STORE_0:	MOV R0, #0
 620:	e3a00000 	mov	r0, #0

00000624 <DONE>:
DONE:		BX LR
 624:	e12fff1e 	bx	lr

00000628 <PB_clear_edgecp_ASM>:


PB_clear_edgecp_ASM:
			LDR R5, =PB_EDGECAPTURE		//load the address of PB_EDGECAPTURE
 628:	e59f502c 	ldr	r5, [pc, #44]	; 65c <disable_PB_INT_ASM+0x18>
			STR R0, [R5]				//store a value into the address
 62c:	e5850000 	str	r0, [r5]
			BX LR
 630:	e12fff1e 	bx	lr

00000634 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
			LDR R8, =0xFF200058
 634:	e59f8024 	ldr	r8, [pc, #36]	; 660 <disable_PB_INT_ASM+0x1c>
			AND R7, R0, #0xF
 638:	e200700f 	and	r7, r0, #15
			STR R7, [R8]
 63c:	e5887000 	str	r7, [r8]
			BX LR
 640:	e12fff1e 	bx	lr

00000644 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
			LDR R9, =0xFF200058
 644:	e59f9014 	ldr	r9, [pc, #20]	; 660 <disable_PB_INT_ASM+0x1c>
			LDR R6, [R9]
 648:	e5996000 	ldr	r6, [r9]
			BIC R6, R6, R0
 64c:	e1c66000 	bic	r6, r6, r0
			STR R6, [R9]
 650:	e5896000 	str	r6, [r9]
			BX LR
 654:	e12fff1e 	bx	lr
			.equ PB_BASE, 0xFF200050
			.equ PB_EDGECAPTURE, 0xFF20005C
			.global read_PB_data_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecp_ASM, enable_PB_INT_ASM, PB_data_is_pressed_ASM

read_PB_data_ASM:
			LDR R1, =PB_BASE			//load the address of PB_BASE
 658:	ff200050 	.word	0xff200050
			LDR R0, [R1]				//load the data stored inside PB_BASE
			BX LR

read_PB_edgecap_ASM:
			LDR R2, =PB_EDGECAPTURE		//load the address of PB_EDGECAPTURE
 65c:	ff20005c 	.word	0xff20005c
			LDR R5, =PB_EDGECAPTURE		//load the address of PB_EDGECAPTURE
			STR R0, [R5]				//store a value into the address
			BX LR

enable_PB_INT_ASM:
			LDR R8, =0xFF200058
 660:	ff200058 	.word	0xff200058

00000664 <atexit>:
 664:	e1a01000 	mov	r1, r0
 668:	e3a00000 	mov	r0, #0
 66c:	e92d4008 	push	{r3, lr}
 670:	e1a02000 	mov	r2, r0
 674:	e1a03000 	mov	r3, r0
 678:	eb00000e 	bl	6b8 <__register_exitproc>
 67c:	e8bd4008 	pop	{r3, lr}
 680:	e12fff1e 	bx	lr

00000684 <exit>:
 684:	e92d4008 	push	{r3, lr}
 688:	e3a01000 	mov	r1, #0
 68c:	e1a04000 	mov	r4, r0
 690:	eb000045 	bl	7ac <__call_exitprocs>
 694:	e59f3018 	ldr	r3, [pc, #24]	; 6b4 <exit+0x30>
 698:	e5930000 	ldr	r0, [r3]
 69c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 6a0:	e3530000 	cmp	r3, #0
 6a4:	11a0e00f 	movne	lr, pc
 6a8:	112fff13 	bxne	r3
 6ac:	e1a00004 	mov	r0, r4
 6b0:	eb0000c9 	bl	9dc <_exit>
 6b4:	00000a9c 	.word	0x00000a9c

000006b8 <__register_exitproc>:
 6b8:	e59fc0e4 	ldr	r12, [pc, #228]	; 7a4 <__register_exitproc+0xec>
 6bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 6c0:	e59c4000 	ldr	r4, [r12]
 6c4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 6c8:	e35c0000 	cmp	r12, #0
 6cc:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 6d0:	e59c5004 	ldr	r5, [r12, #4]
 6d4:	0584c148 	streq	r12, [r4, #328]	; 0x148
 6d8:	e355001f 	cmp	r5, #31
 6dc:	e24dd010 	sub	sp, sp, #16
 6e0:	e1a06000 	mov	r6, r0
 6e4:	da000015 	ble	740 <__register_exitproc+0x88>
 6e8:	e59f00b8 	ldr	r0, [pc, #184]	; 7a8 <__register_exitproc+0xf0>
 6ec:	e3500000 	cmp	r0, #0
 6f0:	1a000001 	bne	6fc <__register_exitproc+0x44>
 6f4:	e3e00000 	mvn	r0, #0
 6f8:	ea000018 	b	760 <__register_exitproc+0xa8>
 6fc:	e3a00e19 	mov	r0, #400	; 0x190
 700:	e58d100c 	str	r1, [sp, #12]
 704:	e58d2008 	str	r2, [sp, #8]
 708:	e58d3004 	str	r3, [sp, #4]
 70c:	e320f000 	nop	{0}
 710:	e250c000 	subs	r12, r0, #0
 714:	e59d100c 	ldr	r1, [sp, #12]
 718:	e59d2008 	ldr	r2, [sp, #8]
 71c:	e59d3004 	ldr	r3, [sp, #4]
 720:	0afffff3 	beq	6f4 <__register_exitproc+0x3c>
 724:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 728:	e3a00000 	mov	r0, #0
 72c:	e58c0004 	str	r0, [r12, #4]
 730:	e58c5000 	str	r5, [r12]
 734:	e584c148 	str	r12, [r4, #328]	; 0x148
 738:	e58c0188 	str	r0, [r12, #392]	; 0x188
 73c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 740:	e3560000 	cmp	r6, #0
 744:	e59c4004 	ldr	r4, [r12, #4]
 748:	1a000007 	bne	76c <__register_exitproc+0xb4>
 74c:	e2843002 	add	r3, r4, #2
 750:	e2844001 	add	r4, r4, #1
 754:	e78c1103 	str	r1, [r12, r3, lsl #2]
 758:	e58c4004 	str	r4, [r12, #4]
 75c:	e3a00000 	mov	r0, #0
 760:	e28dd010 	add	sp, sp, #16
 764:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 768:	e12fff1e 	bx	lr
 76c:	e3a00001 	mov	r0, #1
 770:	e1a00410 	lsl	r0, r0, r4
 774:	e08c8104 	add	r8, r12, r4, lsl #2
 778:	e3560002 	cmp	r6, #2
 77c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 780:	e5883108 	str	r3, [r8, #264]	; 0x108
 784:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 788:	e1877000 	orr	r7, r7, r0
 78c:	01830000 	orreq	r0, r3, r0
 790:	e1a05008 	mov	r5, r8
 794:	e5882088 	str	r2, [r8, #136]	; 0x88
 798:	e58c7188 	str	r7, [r12, #392]	; 0x188
 79c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 7a0:	eaffffe9 	b	74c <__register_exitproc+0x94>
 7a4:	00000a9c 	.word	0x00000a9c
 7a8:	00000000 	.word	0x00000000

000007ac <__call_exitprocs>:
 7ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 7b0:	e59f3168 	ldr	r3, [pc, #360]	; 920 <__call_exitprocs+0x174>
 7b4:	e5933000 	ldr	r3, [r3]
 7b8:	e24dd014 	sub	sp, sp, #20
 7bc:	e58d3004 	str	r3, [sp, #4]
 7c0:	e2833f52 	add	r3, r3, #328	; 0x148
 7c4:	e58d0008 	str	r0, [sp, #8]
 7c8:	e58d300c 	str	r3, [sp, #12]
 7cc:	e1a07001 	mov	r7, r1
 7d0:	e3a08001 	mov	r8, #1
 7d4:	e59d3004 	ldr	r3, [sp, #4]
 7d8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 7dc:	e3560000 	cmp	r6, #0
 7e0:	e59db00c 	ldr	r11, [sp, #12]
 7e4:	0a000033 	beq	8b8 <__call_exitprocs+0x10c>
 7e8:	e5965004 	ldr	r5, [r6, #4]
 7ec:	e2554001 	subs	r4, r5, #1
 7f0:	5286a088 	addpl	r10, r6, #136	; 0x88
 7f4:	5285501f 	addpl	r5, r5, #31
 7f8:	508a5105 	addpl	r5, r10, r5, lsl #2
 7fc:	5a000007 	bpl	820 <__call_exitprocs+0x74>
 800:	ea000029 	b	8ac <__call_exitprocs+0x100>
 804:	e5953000 	ldr	r3, [r5]
 808:	e1530007 	cmp	r3, r7
 80c:	0a000005 	beq	828 <__call_exitprocs+0x7c>
 810:	e2444001 	sub	r4, r4, #1
 814:	e3740001 	cmn	r4, #1
 818:	e2455004 	sub	r5, r5, #4
 81c:	0a000022 	beq	8ac <__call_exitprocs+0x100>
 820:	e3570000 	cmp	r7, #0
 824:	1afffff6 	bne	804 <__call_exitprocs+0x58>
 828:	e5963004 	ldr	r3, [r6, #4]
 82c:	e06a2005 	rsb	r2, r10, r5
 830:	e2433001 	sub	r3, r3, #1
 834:	e0862002 	add	r2, r6, r2
 838:	e1530004 	cmp	r3, r4
 83c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 840:	13a01000 	movne	r1, #0
 844:	05864004 	streq	r4, [r6, #4]
 848:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 84c:	e3530000 	cmp	r3, #0
 850:	0affffee 	beq	810 <__call_exitprocs+0x64>
 854:	e1a02418 	lsl	r2, r8, r4
 858:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 85c:	e1120001 	tst	r2, r1
 860:	e5969004 	ldr	r9, [r6, #4]
 864:	0a000016 	beq	8c4 <__call_exitprocs+0x118>
 868:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 86c:	e1120001 	tst	r2, r1
 870:	1a000016 	bne	8d0 <__call_exitprocs+0x124>
 874:	e59d0008 	ldr	r0, [sp, #8]
 878:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 87c:	e1a0e00f 	mov	lr, pc
 880:	e12fff13 	bx	r3
 884:	e5963004 	ldr	r3, [r6, #4]
 888:	e1530009 	cmp	r3, r9
 88c:	1affffd0 	bne	7d4 <__call_exitprocs+0x28>
 890:	e59b3000 	ldr	r3, [r11]
 894:	e1530006 	cmp	r3, r6
 898:	1affffcd 	bne	7d4 <__call_exitprocs+0x28>
 89c:	e2444001 	sub	r4, r4, #1
 8a0:	e3740001 	cmn	r4, #1
 8a4:	e2455004 	sub	r5, r5, #4
 8a8:	1affffdc 	bne	820 <__call_exitprocs+0x74>
 8ac:	e59f1070 	ldr	r1, [pc, #112]	; 924 <__call_exitprocs+0x178>
 8b0:	e3510000 	cmp	r1, #0
 8b4:	1a000009 	bne	8e0 <__call_exitprocs+0x134>
 8b8:	e28dd014 	add	sp, sp, #20
 8bc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8c0:	e12fff1e 	bx	lr
 8c4:	e1a0e00f 	mov	lr, pc
 8c8:	e12fff13 	bx	r3
 8cc:	eaffffec 	b	884 <__call_exitprocs+0xd8>
 8d0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 8d4:	e1a0e00f 	mov	lr, pc
 8d8:	e12fff13 	bx	r3
 8dc:	eaffffe8 	b	884 <__call_exitprocs+0xd8>
 8e0:	e5963004 	ldr	r3, [r6, #4]
 8e4:	e3530000 	cmp	r3, #0
 8e8:	e5963000 	ldr	r3, [r6]
 8ec:	1a000008 	bne	914 <__call_exitprocs+0x168>
 8f0:	e3530000 	cmp	r3, #0
 8f4:	0a000006 	beq	914 <__call_exitprocs+0x168>
 8f8:	e1a00006 	mov	r0, r6
 8fc:	e58b3000 	str	r3, [r11]
 900:	e320f000 	nop	{0}
 904:	e59b6000 	ldr	r6, [r11]
 908:	e3560000 	cmp	r6, #0
 90c:	1affffb5 	bne	7e8 <__call_exitprocs+0x3c>
 910:	eaffffe8 	b	8b8 <__call_exitprocs+0x10c>
 914:	e1a0b006 	mov	r11, r6
 918:	e1a06003 	mov	r6, r3
 91c:	eafffff9 	b	908 <__call_exitprocs+0x15c>
 920:	00000a9c 	.word	0x00000a9c
 924:	00000000 	.word	0x00000000

00000928 <register_fini>:
 928:	e92d4008 	push	{r3, lr}
 92c:	e59f3010 	ldr	r3, [pc, #16]	; 944 <register_fini+0x1c>
 930:	e3530000 	cmp	r3, #0
 934:	159f000c 	ldrne	r0, [pc, #12]	; 948 <register_fini+0x20>
 938:	1bffff49 	blne	664 <atexit>
 93c:	e8bd4008 	pop	{r3, lr}
 940:	e12fff1e 	bx	lr
 944:	00000ac4 	.word	0x00000ac4
 948:	0000094c 	.word	0x0000094c

0000094c <__libc_fini_array>:
 94c:	e92d4038 	push	{r3, r4, r5, lr}
 950:	e59f5030 	ldr	r5, [pc, #48]	; 988 <__libc_fini_array+0x3c>
 954:	e59f4030 	ldr	r4, [pc, #48]	; 98c <__libc_fini_array+0x40>
 958:	e0654004 	rsb	r4, r5, r4
 95c:	e1b04144 	asrs	r4, r4, #2
 960:	10855104 	addne	r5, r5, r4, lsl #2
 964:	0a000004 	beq	97c <__libc_fini_array+0x30>
 968:	e5353004 	ldr	r3, [r5, #-4]!
 96c:	e1a0e00f 	mov	lr, pc
 970:	e12fff13 	bx	r3
 974:	e2544001 	subs	r4, r4, #1
 978:	1afffffa 	bne	968 <__libc_fini_array+0x1c>
 97c:	eb000050 	bl	ac4 <__libc_fini>
 980:	e8bd4038 	pop	{r3, r4, r5, lr}
 984:	e12fff1e 	bx	lr
 988:	00000adc 	.word	0x00000adc
 98c:	00000ae0 	.word	0x00000ae0

00000990 <__cs3_premain>:
 990:	e92d4008 	push	{r3, lr}
 994:	eb00001d 	bl	a10 <__libc_init_array>
 998:	e59f3030 	ldr	r3, [pc, #48]	; 9d0 <__cs3_premain+0x40>
 99c:	e3530000 	cmp	r3, #0
 9a0:	15930000 	ldrne	r0, [r3]
 9a4:	01a00003 	moveq	r0, r3
 9a8:	e59f3024 	ldr	r3, [pc, #36]	; 9d4 <__cs3_premain+0x44>
 9ac:	e3530000 	cmp	r3, #0
 9b0:	15931000 	ldrne	r1, [r3]
 9b4:	01a01003 	moveq	r1, r3
 9b8:	e3a02000 	mov	r2, #0
 9bc:	ebfffede 	bl	53c <main>
 9c0:	e59f3010 	ldr	r3, [pc, #16]	; 9d8 <__cs3_premain+0x48>
 9c4:	e3530000 	cmp	r3, #0
 9c8:	1bffff2d 	blne	684 <exit>
 9cc:	eafffffe 	b	9cc <__cs3_premain+0x3c>
	...
 9d8:	00000684 	.word	0x00000684

000009dc <_exit>:
 9dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 9e0:	e3a00018 	mov	r0, #24
 9e4:	e59f1004 	ldr	r1, [pc, #4]	; 9f0 <_exit+0x14>
 9e8:	ef123456 	svc	0x00123456
 9ec:	eafffffe 	b	9ec <_exit+0x10>
 9f0:	00020026 	.word	0x00020026

000009f4 <__cs3_isr_interrupt>:
 9f4:	eafffffe 	b	9f4 <__cs3_isr_interrupt>

000009f8 <__cs3_isr_undef>:
 9f8:	eafffffe 	b	9f8 <__cs3_isr_undef>

000009fc <__cs3_isr_swi>:
 9fc:	eafffffe 	b	9fc <__cs3_isr_swi>

00000a00 <__cs3_isr_pabort>:
 a00:	eafffffe 	b	a00 <__cs3_isr_pabort>

00000a04 <__cs3_isr_dabort>:
 a04:	eafffffe 	b	a04 <__cs3_isr_dabort>

00000a08 <__cs3_isr_irq>:
 a08:	eafffffe 	b	a08 <__cs3_isr_irq>

00000a0c <__cs3_isr_fiq>:
 a0c:	eafffffe 	b	a0c <__cs3_isr_fiq>

00000a10 <__libc_init_array>:
 a10:	e92d4070 	push	{r4, r5, r6, lr}
 a14:	e59f506c 	ldr	r5, [pc, #108]	; a88 <__libc_init_array+0x78>
 a18:	e59f606c 	ldr	r6, [pc, #108]	; a8c <__libc_init_array+0x7c>
 a1c:	e0656006 	rsb	r6, r5, r6
 a20:	e1b06146 	asrs	r6, r6, #2
 a24:	12455004 	subne	r5, r5, #4
 a28:	13a04000 	movne	r4, #0
 a2c:	0a000005 	beq	a48 <__libc_init_array+0x38>
 a30:	e5b53004 	ldr	r3, [r5, #4]!
 a34:	e2844001 	add	r4, r4, #1
 a38:	e1a0e00f 	mov	lr, pc
 a3c:	e12fff13 	bx	r3
 a40:	e1560004 	cmp	r6, r4
 a44:	1afffff9 	bne	a30 <__libc_init_array+0x20>
 a48:	e59f5040 	ldr	r5, [pc, #64]	; a90 <__libc_init_array+0x80>
 a4c:	e59f6040 	ldr	r6, [pc, #64]	; a94 <__libc_init_array+0x84>
 a50:	e0656006 	rsb	r6, r5, r6
 a54:	eb000012 	bl	aa4 <_init>
 a58:	e1b06146 	asrs	r6, r6, #2
 a5c:	12455004 	subne	r5, r5, #4
 a60:	13a04000 	movne	r4, #0
 a64:	0a000005 	beq	a80 <__libc_init_array+0x70>
 a68:	e5b53004 	ldr	r3, [r5, #4]!
 a6c:	e2844001 	add	r4, r4, #1
 a70:	e1a0e00f 	mov	lr, pc
 a74:	e12fff13 	bx	r3
 a78:	e1560004 	cmp	r6, r4
 a7c:	1afffff9 	bne	a68 <__libc_init_array+0x58>
 a80:	e8bd4070 	pop	{r4, r5, r6, lr}
 a84:	e12fff1e 	bx	lr
 a88:	00000abc 	.word	0x00000abc
 a8c:	00000abc 	.word	0x00000abc
 a90:	00000abc 	.word	0x00000abc
 a94:	00000ac4 	.word	0x00000ac4

Disassembly of section .rodata:

00000a9c <_global_impure_ptr>:
 a9c:	00000b08 00000043                       ....C...

00000aa4 <_init>:
 aa4:	e1a0c00d 	mov	r12, sp
 aa8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 aac:	e24cb004 	sub	r11, r12, #4
 ab0:	e24bd028 	sub	sp, r11, #40	; 0x28
 ab4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 ab8:	e12fff1e 	bx	lr

00000abc <__init_array_start>:
 abc:	00000928 	.word	0x00000928

00000ac0 <__frame_dummy_init_array_entry>:
 ac0:	00000208                                ....

00000ac4 <__libc_fini>:
 ac4:	e1a0c00d 	mov	r12, sp
 ac8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 acc:	e24cb004 	sub	r11, r12, #4
 ad0:	e24bd028 	sub	sp, r11, #40	; 0x28
 ad4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 ad8:	e12fff1e 	bx	lr

00000adc <__fini_array_start>:
 adc:	000001c4 	.word	0x000001c4

00000ae0 <__cs3_regions>:
	...
 aec:	00000f38 	.word	0x00000f38
 af0:	00000020 	.word	0x00000020

00000af4 <__cs3_regions_end>:
 af4:	00000000 	.word	0x00000000
